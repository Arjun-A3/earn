---
description: 
globs: 
alwaysApply: false
---
 ---
description: Guidelines for implementing Next.js App Router API endpoints
globs: src/app/api/**/*
alwaysApply: false
---
# Next.js App Router API Endpoint Guidelines

This document outlines the standard patterns and best practices for implementing API endpoints in the `app/api` directory using the App Router.

## Route Handler Structure

1. Basic Route Handler:
   ```typescript
   import { NextResponse } from 'next/server';
   import type { NextRequest } from 'next/server';
   
   export async function GET(request: Request) {
     // Implementation
   }
   
   export async function POST(request: Request) {
     // Implementation
   }
   ```

2. Route Handler with Params:
   ```typescript
   export async function GET(
     request: Request,
     props: { params: Promise<{ id: string }> }
   ) {
     const params = await props.params;
     // Implementation
   }
   ```

## Authentication & Authorization

1. Session Management:
   ```typescript
   import { headers } from 'next/headers';
   import { getUserSession, getSponsorSession } from '@/features/auth/utils';
   
   // For user authentication
   const session = await getUserSession(await headers());
   
   if (session.error || !session.data) {
     return NextResponse.json(
       { error: session.error },
       { status: session.status }
     );
   }
   const userId = session.data.userId;
   
   // For sponsor authentication
   const sponsorSession = await getSponsorSession(await headers());
   ```

2. Authorization Checks:
   ```typescript
   // Example sponsor auth check
   const { error } = await checkGrantSponsorAuth(
     session.data.userSponsorId,
     id
   );
   if (error) {
     return NextResponse.json(
       { error: error.message },
       { status: error.status }
     );
   }
   ```

## Request Handling

1. URL Parameters:
   ```typescript
   const { searchParams } = new URL(request.url);
   const param = searchParams.get('paramName');
   ```

2. Body Parsing:
   ```typescript
   const body = await request.json();
   logger.debug(`Request body: ${safeStringify(body)}`);
   ```

## Response Format

1. Success Response:
   ```typescript
   return NextResponse.json({ data, message: 'Success' }, { status: 200 });
   ```

2. Error Response:
   ```typescript
   return NextResponse.json(
     { 
       error: errorMessage,
       message: userFriendlyMessage 
     },
     { status: errorCode }
   );
   ```

## Logging Standards

1. Always use the logger for consistent logging:
   ```typescript
   import logger from '@/lib/logger';
   
   // Debug logs
   logger.debug(`Request body: ${safeStringify(body)}`);
   
   // Info logs
   logger.info('Operation completed successfully', { userId });
   
   // Warning logs
   logger.warn('Warning condition detected', { context });
   
   // Error logs
   logger.error('Error occurred', { error, context });
   ```

## Error Handling

1. Always wrap main logic in try-catch:
   ```typescript
   try {
     // Main logic
   } catch (error: any) {
     logger.error('Error occurred:', error);
     return NextResponse.json(
       {
         error: error.message,
         message: 'Error occurred while processing request',
       },
       { status: 500 }
     );
   }
   ```

## Background Tasks

1. Use `waitUntil` for non-blocking operations:
   ```typescript
   import { waitUntil } from '@vercel/functions';
   
   waitUntil(
     (async () => {
       try {
         // Background task implementation
       } catch (error) {
         logger.error('Background task failed:', error);
       }
     })()
   );
   ```

## Request Validation

1. Use Zod schemas for request validation:
   ```typescript
   const validationResult = schema.safeParse(data);
   
   if (!validationResult.success) {
     return NextResponse.json(
       {
         error: 'Validation failed',
         details: validationResult.error.errors,
       },
       { status: 400 }
     );
   }
   ```

## Performance Optimization

1. Response Caching:
   ```typescript
   // Using Next.js built-in cache control
   export async function GET(request: Request) {
     return NextResponse.json(
       { data },
       {
         headers: {
           'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=30',
         },
       }
     );
   }
   ```

2. Route Segment Config:
   ```typescript
   export const maxDuration = 300; // 5 minutes
   ```

## Code Organization

1. File Structure:
   ```typescript
   // 1. Imports
   import { NextResponse } from 'next/server';
   import { headers } from 'next/headers';
   import logger from '@/lib/logger';
   
   // 2. Type definitions (if needed)
   interface ResponseData {
     // ...
   }
   
   // 3. Route handlers
   export async function POST(request: Request) {
     // Implementation
   }
   ```

2. Keep route handlers focused and single-responsibility

## Security Best Practices

1. Always validate input data
2. Use appropriate HTTP methods
3. Implement proper error handling
4. Use type-safe request/response handling
5. Implement rate limiting where necessary
6. Validate authorization for protected routes