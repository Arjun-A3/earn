---
description: 
globs: 
alwaysApply: true
---
 ---
description: Guidelines for avoiding unnecessary Effects in React components
globs: "**/*.{tsx,ts}"
alwaysApply: true
---

# You Might Not Need an Effect

Effects are an escape hatch from the React paradigm. They let you synchronize your components with external systems. Removing unnecessary Effects makes your code easier to follow, faster to run, and less error-prone.

## When to Avoid Effects

### 1. Data Transformations for Rendering

```jsx
// ðŸ”´ Avoid: Redundant state and unnecessary Effect
function ProfilePage({ user }) {
  const [fullName, setFullName] = useState('');
  
  useEffect(() => {
    setFullName(`${user.firstName} ${user.lastName}`);
  }, [user.firstName, user.lastName]);
  
  return <h1>{fullName}</h1>;
}

// âœ… Good: Calculate during rendering
function ProfilePage({ user }) {
  const fullName = `${user.firstName} ${user.lastName}`;
  return <h1>{fullName}</h1>;
}
```

### 2. Caching Expensive Calculations

```jsx
// ðŸ”´ Avoid: Expensive calculation in Effect
function SearchResults({ query, items }) {
  const [filteredItems, setFilteredItems] = useState([]);
  
  useEffect(() => {
    setFilteredItems(
      items.filter(item => item.title.includes(query))
    );
  }, [items, query]);
  
  return <ItemList items={filteredItems} />;
}

// âœ… Good: Use useMemo for expensive calculations
function SearchResults({ query, items }) {
  const filteredItems = useMemo(() => {
    return items.filter(item => item.title.includes(query));
  }, [items, query]);
  
  return <ItemList items={filteredItems} />;
}
```

### 3. Resetting State When Props Change

```jsx
// ðŸ”´ Avoid: Resetting state in Effect
function ProfileForm({ userId }) {
  const [comment, setComment] = useState('');
  
  useEffect(() => {
    setComment('');
  }, [userId]);
  
  // Rest of component...
}

// âœ… Good: Use key attribute to reset state
export default function ProfilePage({ userId }) {
  return <ProfileForm key={userId} userId={userId} />;
}

function ProfileForm({ userId }) {
  const [comment, setComment] = useState('');
  // Component will fully reset when key changes
}
```

### 4. Adjusting State When Props Change

```jsx
// ðŸ”´ Avoid: Adjusting state in Effect
function List({ items }) {
  const [selection, setSelection] = useState(null);
  
  useEffect(() => {
    if (items.length > 0 && !items.includes(selection)) {
      setSelection(items[0]);
    }
  }, [items, selection]);
  
  // Rest of component...
}

// âœ… Better: Calculate during render with previous value check
function List({ items }) {
  const [prevItems, setPrevItems] = useState(items);
  const [selection, setSelection] = useState(items.length > 0 ? items[0] : null);
  
  if (items !== prevItems) {
    setPrevItems(items);
    if (!items.includes(selection)) {
      setSelection(items.length > 0 ? items[0] : null);
    }
  }
  
  // Rest of component...
}

// âœ… Best: Calculate everything during rendering
function List({ items }) {
  const [selectedId, setSelectedId] = useState(null);
  // Always valid even if items change
  const selection = items.find(item => item.id === selectedId) || (items.length > 0 ? items[0] : null);
  
  // Rest of component...
}
```

### 5. Event-Specific Logic

```jsx
// ðŸ”´ Avoid: Form submission in Effect
function SubmitForm() {
  const [submitted, setSubmitted] = useState(false);
  const [formData, setFormData] = useState(null);
  
  useEffect(() => {
    if (formData !== null) {
      fetch('/api/submit', {
        method: 'POST',
        body: JSON.stringify(formData)
      });
    }
  }, [formData]);
  
  function handleSubmit(e) {
    e.preventDefault();
    setFormData(collectFormData());
    setSubmitted(true);
  }
  
  // Rest of component...
}

// âœ… Good: Submit in the event handler
function SubmitForm() {
  const [submitted, setSubmitted] = useState(false);
  
  async function handleSubmit(e) {
    e.preventDefault();
    const formData = collectFormData();
    
    await fetch('/api/submit', {
      method: 'POST',
      body: JSON.stringify(formData)
    });
    
    setSubmitted(true);
  }
  
  // Rest of component...
}
```

### 6. Chain of Computations

```jsx
// ðŸ”´ Avoid: Chain of Effects to update related state
function GameScore() {
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [gameStatus, setGameStatus] = useState('playing');
  
  useEffect(() => {
    if (score > 100) {
      setLevel(2);
    }
  }, [score]);
  
  useEffect(() => {
    if (level > 3) {
      setGameStatus('won');
    }
  }, [level]);
  
  // Rest of component...
}

// âœ… Good: Calculate all derived state in event handlers
function GameScore() {
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [gameStatus, setGameStatus] = useState('playing');
  
  function handleScorePoint(points) {
    const newScore = score + points;
    setScore(newScore);
    
    // Calculate all derived state at once
    if (newScore > 100 && level === 1) {
      const newLevel = 2;
      setLevel(newLevel);
      
      if (newLevel > 3) {
        setGameStatus('won');
      }
    }
  }
  
  // Rest of component...
}
```

### 7. Post-Render Notifications

```jsx
// ðŸ”´ Avoid: Showing notifications in Effects
function ProductPage({ product, addToCart }) {
  useEffect(() => {
    if (product.isInCart) {
      showNotification(`Added ${product.name} to cart!`);
    }
  }, [product]);
  
  // Rest of component...
}

// âœ… Good: Show notifications in event handlers
function ProductPage({ product, addToCart }) {
  function handleAddToCart() {
    addToCart(product);
    showNotification(`Added ${product.name} to cart!`);
  }
  
  // Rest of component...
}
```

### 8. Data Fetching (Without Proper Cleanup)

```jsx
// ðŸ”´ Avoid: Fetching without cleanup
function SearchResults({ query }) {
  const [results, setResults] = useState([]);
  
  useEffect(() => {
    fetchResults(query).then(json => {
      setResults(json);
    });
  }, [query]);
  
  // Rest of component...
}

// âœ… Good: Fetching with proper cleanup to prevent race conditions
function SearchResults({ query }) {
  const [results, setResults] = useState([]);
  
  useEffect(() => {
    let ignore = false;
    
    async function fetchData() {
      const json = await fetchResults(query);
      if (!ignore) {
        setResults(json);
      }
    }
    
    fetchData();
    
    return () => {
      ignore = true;
    };
  }, [query]);
  
  // Rest of component...
}

// âœ… Best: Use a custom Hook for better encapsulation
function SearchResults({ query }) {
  const results = useData(`/api/search?q=${query}`);
  
  // Rest of component...
}

function useData(url) {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    let ignore = false;
    
    async function fetchData() {
      const response = await fetch(url);
      const json = await response.json();
      if (!ignore) {
        setData(json);
      }
    }
    
    fetchData();
    
    return () => {
      ignore = true;
    };
  }, [url]);
  
  return data;
}
```

## When You Do Need Effects

Effects are appropriate when you need to synchronize with external systems:

1. Managing browser APIs subscriptions (event listeners, timers, etc.)
2. Managing third-party library integrations
3. Managing WebSocket connections
4. Controlling non-React UI widgets
5. Fetching data with proper cleanup (though frameworks often provide better alternatives)

## Summary

1. If you can calculate something during render, you don't need an Effect
2. For expensive calculations, use `useMemo` instead of Effects
3. To reset all component state, use the `key` prop
4. To update state based on props, calculate during render when possible
5. Code that runs because of an event should be in event handlers
6. Avoid chains of state updates in multiple Effects
7. Consider using custom Hooks for data fetching and subscriptions