---
description: 
globs: 
alwaysApply: true
---
# React State Updates: Batching and Updater Functions, useEffect lifecycle, reactive dependencies, and custom Hook patterns

## Batching State Updates

React automatically batches multiple state updates that occur within the same event handler or synchronous block of code.

```jsx
// ❌ Doesn't work as expected - all updates use the same original state value
function handleClick() {
  setCount(count + 1); // Uses current count value
  setCount(count + 1); // Still uses the same original count value
  setCount(count + 1); // Still uses the same original count value
}
// Result: count only increases by 1, not 3
```

## Using Updater Functions

To perform multiple sequential updates to the same state variable, use the functional updater pattern:

```jsx
// ✅ Correctly applies multiple updates sequentially
function handleClick() {
  setCount(prevCount => prevCount + 1);
  setCount(prevCount => prevCount + 1);
  setCount(prevCount => prevCount + 1);
}
// Result: count increases by 3
```

## State Update Queue Processing

React processes state updates in the order they were created:

1. `setCount(5)` → Replaces current value with 5 in the queue
2. `setCount(n => n + 1)` → Adds the updater function to the queue
3. `setCount(42)` → Replaces all previous changes with 42 in the queue

Example with mixed updates:
```jsx
function handleClick() {
  setCount(count + 5); // Replace with count + 5
  setCount(n => n + 1); // Apply updater to previous result
  setCount(42); // Replace everything with 42
}
// Result: count becomes 42
```

## Asynchronous Operations and State

When working with asynchronous code (like API calls or timers), always use the updater function pattern to avoid stale state:

```jsx
// ❌ Problematic - uses potentially stale state value
async function handleSubmit() {
  setPending(pending + 1); // Captures current value
  await submitForm();
  setPending(pending - 1); // Still using the same (now stale) value
}

// ✅ Correct - uses most recent state value
async function handleSubmit() {
  setPending(p => p + 1); // Uses latest value at execution time
  await submitForm();
  setPending(p => p - 1); // Uses latest value at execution time
}
```

# Advanced useEffect and Custom Hooks

This rule covers the complete mental model for working with Effects and Custom Hooks, focusing on proper synchronization patterns, dependencies management, and composition.

## The Effect Lifecycle and Mental Model

Effects represent synchronization processes with external systems, not merely "lifecycle events":

```jsx
// ✅ Effects synchronize with external systems
useEffect(() => {
  // Setup phase - starts synchronization
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  
  // Cleanup phase - stops synchronization
  return () => connection.disconnect();
}, [roomId, serverUrl]);
```

**Mental model:** Instead of thinking in terms of "mounting/updating/unmounting", think about:
1. Your Effect starts synchronizing (connects to the chat)
2. If dependencies change, your Effect stops and re-starts synchronization
3. When component is removed, synchronization stops

## Effects React to Reactive Values

React effects respond to changes in reactive values:

```jsx
function ChatRoom({ roomId }) { // roomId is reactive (props)
  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive (state)
  
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, serverUrl]); // Must include all reactive values used inside
}
```

**Key insight:** All values (props, state, variables) declared in component body are reactive and must be included in dependencies if used in your Effect.

## Fixing Dependency Issues with Better Code Structure

Instead of suppressing the linter, fix the underlying issue:

```jsx
// 🔴 Avoid: Suppressing the linter
useEffect(() => {
  const id = setInterval(() => {
    setCount(count + 1);
  }, 1000);
  return () => clearInterval(id);
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, []);

// ✅ Fix: Use an updater function to remove the dependency
useEffect(() => {
  const id = setInterval(() => {
    setCount(c => c + 1); // No dependency on count
  }, 1000);
  return () => clearInterval(id);
}, []); // No missing dependencies
```

## Reading Values Without Reacting to Them with Effect Events

For values you want to read without re-triggering your Effect:

```jsx
// ✅ Using Effect Events for non-reactive logic
function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');
  const theme = useContext(ThemeContext);
  
  const onConnected = useEffectEvent(connectedRoomId => {
    // Can read latest values like theme without reactivity
    showNotification(`Connected to ${connectedRoomId}`, theme);
  });

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.on('connected', () => {
      onConnected(roomId);
    });
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, serverUrl]); // No need to include theme or onConnected
}
```

**Important constraints:**
1. Only call Effect Events from inside Effects
2. Never pass them to other components or hooks

## When You Do and Don't Need Effects

```jsx
// 🔴 Avoid: Effects for computations
useEffect(() => {
  setFilteredTodos(todos.filter(todo => todo.status === filter));
}, [todos, filter]);

// ✅ Calculate values during rendering instead
const filteredTodos = todos.filter(todo => todo.status === filter);
```

```jsx
// 🔴 Avoid: Effects for handling events
useEffect(() => {
  if (submitted) {
    post('/api/register', formData);
    showNotification('Registered successfully!');
  }
}, [submitted, formData]);

// ✅ Handle in the event that caused the state change
function handleSubmit() {
  post('/api/register', formData);
  showNotification('Registered successfully!');
  setSubmitted(true);
}
```

## Designing Custom Hooks for Reuse

Custom Hooks extract reusable logic, not just to avoid duplication but to express intent:

```jsx
// ✅ Encapsulates complete networking + state management logic
function useData(url) {
  const [data, setData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let ignore = false;
    setIsLoading(true);
    
    async function fetchData() {
      try {
        const response = await fetch(url);
        const json = await response.json();
        if (!ignore) {
          setData(json);
          setError(null);
        }
      } catch (e) {
        if (!ignore) {
          setError(e);
          setData(null);
        }
      } finally {
        if (!ignore) {
          setIsLoading(false);
        }
      }
    }
    
    fetchData();
    return () => {
      ignore = true;
    };
  }, [url]);

  return { data, isLoading, error };
}
```

## Custom Hooks Don't Share State

Each component calling a custom Hook gets isolated state:

```jsx
function ChatRoom() {
  // Each component gets its own isOnline state
  const isOnline = useOnlineStatus();
  // ...
}

function StatusBar() {
  // This is a completely separate isOnline state
  const isOnline = useOnlineStatus();
  // ...
}
```

## Passing Reactive Values Between Hooks

Custom Hooks create composition chains where data flows between Hooks:

```jsx
// The return value of one Hook becomes input to another
function ChatApp() {
  const [roomId, setRoomId] = useState('general');
  // Reactive value from useState feeds into useChatRoom
  const connectionStatus = useChatRoom(roomId);
  // Reactive value from useChatRoom feeds into useAutoStatus
  const autoStatus = useAutoStatus(connectionStatus);
  // ...
}
```

## Custom Hook Naming Conventions and Design Principles

```jsx
// 🔴 Avoid: Generic lifecycle Hooks
useMount(() => { ... });
useEffectOnce(() => { ... });

// 🔴 Avoid: Hooks without clear purpose
useStateWithLocalStorage(key, initialValue);

// ✅ Good: Domain-specific Hooks with clear intent
useOnlineStatus();
useChatRoom({ roomId, serverUrl });
useWindowDimensions();
useImpressionLogger('homepage_viewed');
```

**Best practices:**
1. Name Hooks after their purpose, not implementation details
2. Design Hooks around concrete use cases, not abstract concepts
3. Aim for Hooks that need minimal configuration to use
4. Prefer exposing primitive values over complex objects when possible

## Migrating Between Patterns

Custom Hooks make it easier to adopt modern patterns:

```jsx
// Current approach with useEffect
function SearchResults({ query }) {
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    let ignore = false;
    setIsLoading(true);
    fetchResults(query).then(json => {
      if (!ignore) {
        setResults(json);
        setIsLoading(false);
      }
    });
    return () => {
      ignore = true;
    };
  }, [query]);
  // ...
}

// ✅ Future React pattern (not yet available)
function SearchResults({ query }) {
  // Migrating to a built-in hook will be easier
  // if your code already uses custom Hooks
  const results = use(fetchResults(query));
  // ...
}
```

## Testing Custom Hooks

For comprehensive testing of custom Hooks:

```jsx
// ✅ Test the Hook through a component
function TestComponent({ url }) {
  const { data, isLoading, error } = useData(url);
  return (
    <div>
      {isLoading && <p>Loading...</p>}
      {error && <p>Error: {error.message}</p>}
      {data && <p>Data: {JSON.stringify(data)}</p>}
    </div>
  );
}

// Tests can render TestComponent with different props
// and assert on the rendered output
test('loads and displays data', async () => {
  render(<TestComponent url="/api/data" />);
  expect(screen.getByText('Loading...')).toBeInTheDocument();
  await screen.findByText(/Data:/);
  expect(screen.queryByText('Loading...')).not.toBeInTheDocument();
});
```

## Common Custom Hooks Implementation Patterns

### 1. State Encapsulation Pattern

```jsx
function useFormInput(initialValue) {
  const [value, setValue] = useState(initialValue);
  
  function handleChange(e) {
    setValue(e.target.value);
  }

  return {
    value,
    onChange: handleChange,
    // Additional properties make the Hook more useful
    reset: () => setValue(initialValue),
    isEmpty: value.trim() === ''
  };
}

// Usage
function Form() {
  const nameInput = useFormInput('');
  // Spread all props to an input
  return <input {...nameInput} />;
}
```

### 2. Subscription Pattern

```jsx
function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(true);
  
  useEffect(() => {
    function handleOnline() {
      setIsOnline(true);
    }
    function handleOffline() {
      setIsOnline(false);
    }
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  
  return isOnline;
}
```

### 3. Side Effect Encapsulation

```jsx
function useDocumentTitle(title) {
  useEffect(() => {
    const previousTitle = document.title;
    document.title = title;
    
    return () => {
      document.title = previousTitle;
    };
  }, [title]);
}
```

## Best Practices

1. Use updater functions when the new state depends on the previous state
2. Use updater functions in async operations to avoid stale state problems
3. Prefer small, focused state variables over large object state
4. Always treat state as immutable - never modify state objects or arrays directly
5. Keep Effects focused on a single concern
6. Extract repeated Effect logic into custom Hooks
7. Use Effect Events for non-reactive code
8. Never suppress the dependency linter - fix the root cause
9. Use updater functions to avoid unnecessary dependencies
10. Prefer calculation during rendering over Effects
11. Always handle cleanup to prevent memory leaks
12. Create custom Hooks around specific use cases

## Additional Resources

- [Official React docs on batching state updates](mdc:https:/react.dev/learn/queueing-a-series-of-state-updates)
- [Understanding state batching in React 18](mdc:https:/react.dev/blog/2022/03/29/react-v18#new-feature-automatic-batching) 
- @React docs: Synchronizing with Effects
- @React docs: You Might Not Need an Effect
- @React docs: Removing Effect Dependencies
- @React docs: Reusing Logic with Custom Hooks