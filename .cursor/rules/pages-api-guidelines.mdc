---
description: 
globs: 
alwaysApply: false
---
 ---
description: Guidelines for implementing Next.js pages/api endpoints
globs: src/pages/api/**/*
alwaysApply: false
---
# Next.js Pages API Endpoint Guidelines

This document outlines the standard patterns and best practices for implementing API endpoints in the `pages/api` directory.

## Authentication & Authorization

1. Protected Routes:
   - Use `withAuth` HOC for basic user authentication
   - Use `withSponsorAuth` HOC for sponsor-specific routes
   - Always type the request with appropriate interface:
     ```typescript
     import type { NextApiRequestWithUser } from '@/features/auth/types';
     import type { NextApiRequestWithSponsor } from '@/features/auth/types';
     ```

2. Request Handler Structure:
   ```typescript
   // Protected route example
   async function handler(req: NextApiRequestWithUser, res: NextApiResponse) {
     const userId = req.userId;
     
     if (!userId) {
       return res.status(401).json({ error: 'Unauthorized' });
     }
     
     // ... handler logic
   }

   export default withAuth(handler);
   ```

## Logging Standards

1. Always use the logger for consistent logging:
   ```typescript
   import logger from '@/lib/logger';
   ```

2. Logging Patterns:
   ```typescript
   // Debug logs for request data
   logger.debug(`Request query: ${safeStringify(req.query)}`);
   
   // Info logs for successful operations
   logger.info(`Operation completed for user: ${userId}`);
   
   // Warning logs for handled issues
   logger.warn(`Invalid data: ${someData}`);
   
   // Error logs for exceptions
   logger.error(`Error occurred: ${safeStringify(error)}`);
   ```

## Error Handling

1. Always wrap main logic in try-catch:
   ```typescript
   try {
     // Main logic
   } catch (error: any) {
     logger.error(`Error in operation: ${safeStringify(error)}`);
     return res.status(500).json({
       error: error.message || 'Internal server error',
       message: 'Error occurred while processing request.'
     });
   }
   ```

2. HTTP Status Codes:
   - 200: Successful operations
   - 400: Bad request/validation errors
   - 401: Unauthorized (no auth token)
   - 403: Forbidden (insufficient permissions)
   - 404: Resource not found
   - 500: Internal server error

## Request Validation

1. Use Zod schemas for request validation:
   ```typescript
   const validationResult = someSchema.safeParse(req.body);
   
   if (!validationResult.success) {
     logger.warn(`Invalid data: ${safeStringify(validationResult.error)}`);
     return res.status(403).json({
       error: 'Invalid data',
       details: validationResult.error.errors
     });
   }
   ```

## Response Format

1. Success Response:
   ```typescript
   return res.status(200).json({
     data: result,
     message: 'Operation successful'
   });
   ```

2. Error Response:
   ```typescript
   return res.status(errorCode).json({
     error: errorMessage,
     message: userFriendlyMessage
   });
   ```

## Database Operations

1. Use Prisma client for database operations:
   ```typescript
   import { prisma } from '@/prisma';
   ```

2. Always handle database errors in try-catch blocks

## Type Safety

1. Always use TypeScript types for request/response objects
2. Use proper type imports from Next.js:
   ```typescript
   import type { NextApiResponse } from 'next';
   ```

## Code Organization

1. File Structure:
   ```typescript
   // 1. Imports
   import type { NextApiResponse } from 'next';
   import { prisma } from '@/prisma';
   import logger from '@/lib/logger';
   
   // 2. Type imports
   import type { NextApiRequestWithUser } from '@/features/auth/types';
   
   // 3. Handler function
   async function handler(req: NextApiRequestWithUser, res: NextApiResponse) {
     // Implementation
   }
   
   // 4. Export with auth wrapper
   export default withAuth(handler);
   ```

2. Keep files focused and single-responsibility

## Performance & Security

1. Use appropriate caching headers when needed:
   ```typescript
   import { setCacheHeaders } from '@/utils/cacheControl';
   
   setCacheHeaders(res, {
     public: true,
     maxAge: 24 * 60 * 60,
     sMaxAge: 24 * 60 * 60,
     staleWhileRevalidate: 60 * 60
   });
   ```

2. Always validate and sanitize input data
3. Use proper rate limiting for public endpoints
4. Implement appropriate authorization checks