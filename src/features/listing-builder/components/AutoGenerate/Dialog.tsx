import { useChat } from '@ai-sdk/react';
import { useMutation } from '@tanstack/react-query';
import { DefaultChatTransport } from 'ai';
import { useAtom } from 'jotai';
import { AnimatePresence } from 'motion/react';
import posthog from 'posthog-js';
import { useCallback, useEffect, useState } from 'react';

import { type TTokenGenerateResponse } from '@/app/api/sponsor-dashboard/ai-generate/token/route';
import { AnimateChangeInHeight } from '@/components/shared/AnimateChangeInHeight';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { tokenList } from '@/constants/tokenList';
import { type BountyType } from '@/generated/prisma/enums';
import { api } from '@/lib/api';
import { useUser } from '@/store/user';
import { cn } from '@/utils/cn';

import { fetchTokenUSDValue } from '@/features/wallet/utils/fetchTokenUSDValue';

import { isAutoGenerateOpenAtom } from '../../atoms';
import { ProgressiveBlurOut } from '../AiGenerate/extras/ProgressiveBlurOut';
import { AutoGenerateChat } from './Chat';
import { prepareCompanyInfo } from './company-info';
import { AutoGenerateForm } from './Form';
import { AutoGenerateStageType } from './Type';

function adjustPrompt(prompt: string, refine: boolean) {
  if (refine) {
    return `
    This is a refine request, so iterate the previous output based on current input.
    Directly provide the output description, do not include any other text like greeting, reasoning, etc.
    User Message: ${prompt}
    `;
  }
  return `
  Directly provide the output description, do not include any other text like greeting, reasoning, etc
  User Message: ${prompt}
  `;
}

export function AutoGenerateDialog() {
  const [stage, setStage] = useState<'type' | 'form' | 'chat'>('type');
  const [type, setType] = useState<BountyType>('bounty');
  const [open, setOpen] = useAtom(isAutoGenerateOpenAtom);
  const [input, setInput] = useState('');

  const { user } = useUser();

  const [scrollEl, setScrollEl] = useState<HTMLDivElement | null>(null);

  const scrollCallbackRef = useCallback((node: HTMLDivElement | null) => {
    if (node !== null) {
      setScrollEl(node);
    }
  }, []);

  const { messages, sendMessage, status, setMessages } = useChat({
    transport: new DefaultChatTransport({
      api: '/api/sponsor-dashboard/ai-generate/description',
    }),
  });

  const {
    data: _token,
    mutateAsync: callToken,
    reset: _resetToken,
  } = useMutation({
    mutationFn: async ({ description }: { description: string }) =>
      (
        await api.post<TTokenGenerateResponse>(
          '/api/sponsor-dashboard/ai-generate/token',
          {
            description,
          },
        )
      ).data,
  });

  const handleTypeSelect = (type: BountyType) => {
    setType(type);
    setStage('form');
  };

  const handleSendMessage = async (refine: boolean = false) => {
    const text = input;
    setInput('');
    setStage('chat');
    const token = (await callToken({ description: text }))?.token || 'USDC';
    const tokenItem = tokenList.find((s) => s.tokenSymbol === token);
    const tokenUsdAmount = tokenItem
      ? await fetchTokenUSDValue(tokenItem.mintAddress)
      : 1;
    sendMessage(
      {
        role: 'user',
        parts: [{ type: 'text', text: adjustPrompt(text, refine) }],
      },
      {
        body: {
          token,
          tokenUsdAmount,
          company: user?.currentSponsor
            ? prepareCompanyInfo(user?.currentSponsor)
            : 'unknown sponsor',
          listingType: type,
        },
      },
    );
  };

  useEffect(() => {
    console.log(status);
    console.log(messages);
  }, [messages, status]);

  return (
    <Dialog
      open={open}
      onOpenChange={(open) => {
        if (!open) posthog.capture('close_auto-generate');
        setOpen(open);
      }}
    >
      <DialogContent
        className={cn(
          'gap-0 overflow-hidden border-0 p-0 focus-visible:ring-0 sm:max-w-160',
        )}
        style={{
          borderImageWidth: '0px !important',
        }}
        onPointerDownOutside={(e) => e.preventDefault()}
        onInteractOutside={(e) => e.preventDefault()}
        aria-describedby="Auto Generate Listing"
        hideCloseIcon
        autoFocus={false}
      >
        <button className="sr-only" />
        <ScrollArea
          type="scroll"
          className="relative max-h-160 py-0"
          viewportProps={{
            ref: scrollCallbackRef,
            className: 'h-full *:h-full',
          }}
        >
          <AnimateChangeInHeight>
            <div className={cn('h-full p-0')}>
              <AnimatePresence mode="popLayout">
                {stage === 'type' && (
                  <AutoGenerateStageType
                    type={type}
                    setType={handleTypeSelect}
                  />
                )}
                {stage === 'form' && (
                  <AutoGenerateForm
                    type={type}
                    setType={setType}
                    input={input}
                    setInput={setInput}
                    onSubmit={() => handleSendMessage(false)}
                  />
                )}
                {stage === 'chat' && (
                  <AutoGenerateChat
                    description={
                      messages?.[messages.length - 1]?.parts
                        .filter((part) => part.type === 'text')
                        ?.map((part) => part.text)
                        .join('') || ''
                    }
                    error={status === 'error'}
                    loading={status === 'streaming'}
                    input={input}
                    setInput={setInput}
                    handleRefine={() => handleSendMessage(true)}
                    handleBack={() => {
                      setStage('form');
                      setMessages([]);
                    }}
                  />
                )}
              </AnimatePresence>
            </div>
          </AnimateChangeInHeight>
          {stage === 'chat' && <ProgressiveBlurOut scrollEl={scrollEl} />}
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}
