import { AnimatePresence, motion } from 'motion/react';
import { useState } from 'react';

import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { type BountyType } from '@/generated/prisma/enums';
import { type HackathonModel } from '@/prisma/models/Hackathon';
import { BountyIcon } from '@/svg/bounty-icon';
import { ProjectIcon } from '@/svg/project-icon';
import Sparkle from '@/svg/sparkle';

import { Templates } from './Templates';
import { AutoGenerateDropdownType } from './Type';

interface AutoGenerateFormProps {
  type: BountyType;
  setType: (type: BountyType) => void;
  onBack?: () => void;
  onSubmit: () => void;
  input: string;
  setInput: (input: string) => void;
  setHackathonSlug: (hackathon: string) => void;
  hackathonSlug: string;
  hackathons?: HackathonModel[];
}

export function AutoGenerateForm({
  type,
  setType,
  onBack: _onBack,
  onSubmit,
  input,
  setInput,
  setHackathonSlug,
  hackathonSlug,
  hackathons,
}: AutoGenerateFormProps) {
  const [_selectedTemplate, _setSelectedTemplate] = useState<string>('');
  const [showValidation, setShowValidation] = useState(false);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter') {
      if (e.metaKey || e.ctrlKey || e.shiftKey) {
        e.preventDefault();
        if (input && input.trim() !== '') {
          onSubmit();
        }
        return;
      }
    }
  };

  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {type === 'bounty' ? (
            <BountyIcon
              styles={{ width: '1.2rem', height: '1.2rem' }}
              className="fill-gray-500"
            />
          ) : (
            <ProjectIcon
              styles={{ width: '1.2rem', height: '1.2rem' }}
              className="fill-gray-500"
            />
          )}
          <h2 className="text-lg font-medium">Generate your {type} with AI</h2>
        </div>
        <div>
          <AutoGenerateDropdownType
            type={type}
            setType={setType}
            setHackathonSlug={setHackathonSlug}
            hackathonSlug={hackathonSlug}
            hackathons={hackathons}
          />
        </div>
      </div>

      <div className="relative space-y-4">
        <Textarea
          placeholder="Briefly describe the scope of your task"
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            // Hide validation if input becomes empty
            if (e.target.value.length === 0) {
              setShowValidation(false);
            }
          }}
          onKeyDown={handleKeyDown}
          onBlur={() => {
            // Show validation on blur if there's content
            if (input.length > 0) {
              setShowValidation(true);
            }
          }}
          className="min-h-55 w-full resize-none"
        />
        <AnimatePresence>
          {input.length === 0 && (
            <motion.div
              initial={{ opacity: 0, y: 10, filter: 'blur(4px)' }}
              animate={{ opacity: 1, y: 0, filter: 'blur(0px)' }}
              exit={{ opacity: 0, y: 10, filter: 'blur(4px)' }}
              transition={{ type: 'spring', bounce: 0, duration: 0.3 }}
              className="absolute bottom-2 left-2/4 w-max -translate-x-2/4"
            >
              <Templates
                type={type}
                onSelectTemplate={({ prompt }) => setInput(prompt)}
              />
            </motion.div>
          )}
        </AnimatePresence>
        <AnimatePresence>
          {showValidation &&
            input.length > 0 &&
            (() => {
              const charsWithoutTrailingSpaces = input.trim().length;
              return charsWithoutTrailingSpaces < 200;
            })() && (
              <motion.div
                initial={{ opacity: 0, y: 10, filter: 'blur(4px)' }}
                animate={{ opacity: 1, y: 0, filter: 'blur(0px)' }}
                exit={{ opacity: 0, y: 10, filter: 'blur(4px)' }}
                transition={{ type: 'spring', bounce: 0, duration: 0.3 }}
                className="absolute bottom-[0.0625rem] left-2/4 w-[calc(100%-0.125rem)] -translate-x-2/4 rounded-md bg-yellow-50 p-2 text-xs text-yellow-600"
              >
                <p>
                  Write at least {200 - input.trim().length} characters more
                </p>
              </motion.div>
            )}
        </AnimatePresence>
      </div>

      <div className="flex justify-end">
        <Button
          onClick={onSubmit}
          disabled={
            !input ||
            input?.trim() === '' ||
            (showValidation && input.trim().length < 200)
          }
          className="w-fit"
        >
          <Sparkle />
          Generate Lisiing
        </Button>
      </div>
    </div>
  );
}
