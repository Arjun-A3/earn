
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BountiesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  deadline: 'deadline',
  commitmentDate: 'commitmentDate',
  eligibility: 'eligibility',
  status: 'status',
  token: 'token',
  rewardAmount: 'rewardAmount',
  rewards: 'rewards',
  maxBonusSpots: 'maxBonusSpots',
  usdValue: 'usdValue',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  source: 'source',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  applicationLink: 'applicationLink',
  skills: 'skills',
  type: 'type',
  requirements: 'requirements',
  isWinnersAnnounced: 'isWinnersAnnounced',
  templateId: 'templateId',
  region: 'region',
  pocSocials: 'pocSocials',
  hackathonprize: 'hackathonprize',
  applicationType: 'applicationType',
  timeToComplete: 'timeToComplete',
  references: 'references',
  referredBy: 'referredBy',
  publishedAt: 'publishedAt',
  isPrivate: 'isPrivate',
  hackathonId: 'hackathonId',
  compensationType: 'compensationType',
  maxRewardAsk: 'maxRewardAsk',
  minRewardAsk: 'minRewardAsk',
  language: 'language',
  shouldSendEmail: 'shouldSendEmail',
  isFndnPaying: 'isFndnPaying',
  winnersAnnouncedAt: 'winnersAnnouncedAt',
  discordMessageIds: 'discordMessageIds'
};

exports.Prisma.BountiesTemplatesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  deadline: 'deadline',
  slug: 'slug',
  description: 'description',
  color: 'color',
  emoji: 'emoji',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  skills: 'skills',
  type: 'type',
  requirements: 'requirements',
  region: 'region',
  applicationType: 'applicationType',
  status: 'status',
  timeToComplete: 'timeToComplete',
  token: 'token',
  references: 'references',
  referredBy: 'referredBy',
  publishedAt: 'publishedAt',
  compensationType: 'compensationType',
  maxRewardAsk: 'maxRewardAsk',
  minRewardAsk: 'minRewardAsk',
  language: 'language',
  rewardAmount: 'rewardAmount',
  rewards: 'rewards',
  maxBonusSpots: 'maxBonusSpots',
  usdValue: 'usdValue',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  pocSocials: 'pocSocials',
  source: 'source',
  isPublished: 'isPublished'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  message: 'message',
  authorId: 'authorId',
  refType: 'refType',
  refId: 'refId',
  isActive: 'isActive',
  isArchived: 'isArchived',
  isPinned: 'isPinned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  replyToId: 'replyToId',
  submissionId: 'submissionId',
  type: 'type'
};

exports.Prisma.GrantsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  token: 'token',
  minReward: 'minReward',
  maxReward: 'maxReward',
  totalPaid: 'totalPaid',
  totalApproved: 'totalApproved',
  historicalApplications: 'historicalApplications',
  historicalPaid: 'historicalPaid',
  link: 'link',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  skills: 'skills',
  logo: 'logo',
  region: 'region',
  questions: 'questions',
  pocSocials: 'pocSocials',
  status: 'status',
  airtableId: 'airtableId',
  avgResponseTime: 'avgResponseTime',
  isNative: 'isNative',
  isPrivate: 'isPrivate',
  references: 'references',
  ai: 'ai',
  approverRecordId: 'approverRecordId',
  emailSender: 'emailSender',
  replyToEmail: 'replyToEmail',
  emailSalutation: 'emailSalutation',
  communityLink: 'communityLink'
};

exports.Prisma.GrantApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  grantId: 'grantId',
  applicationStatus: 'applicationStatus',
  projectTitle: 'projectTitle',
  projectOneLiner: 'projectOneLiner',
  projectDetails: 'projectDetails',
  projectTimeline: 'projectTimeline',
  proofOfWork: 'proofOfWork',
  walletAddress: 'walletAddress',
  twitter: 'twitter',
  github: 'github',
  milestones: 'milestones',
  kpi: 'kpi',
  answers: 'answers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  label: 'label',
  ask: 'ask',
  approvedAmount: 'approvedAmount',
  approvedAmountInUSD: 'approvedAmountInUSD',
  decidedAt: 'decidedAt',
  totalPaid: 'totalPaid',
  isShipped: 'isShipped',
  paymentDetails: 'paymentDetails',
  totalTranches: 'totalTranches',
  like: 'like',
  likeCount: 'likeCount',
  decidedBy: 'decidedBy',
  notes: 'notes',
  ai: 'ai'
};

exports.Prisma.GrantTrancheScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  grantId: 'grantId',
  ask: 'ask',
  update: 'update',
  helpWanted: 'helpWanted',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAmount: 'approvedAmount',
  decidedAt: 'decidedAt',
  trancheNumber: 'trancheNumber'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  link: 'link',
  tweet: 'tweet',
  status: 'status',
  eligibilityAnswers: 'eligibilityAnswers',
  userId: 'userId',
  listingId: 'listingId',
  isWinner: 'isWinner',
  winnerPosition: 'winnerPosition',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  like: 'like',
  likeCount: 'likeCount',
  isPaid: 'isPaid',
  paymentDetails: 'paymentDetails',
  otherInfo: 'otherInfo',
  ask: 'ask',
  label: 'label',
  rewardInUSD: 'rewardInUSD',
  ogImage: 'ogImage',
  notes: 'notes'
};

exports.Prisma.SponsorsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  url: 'url',
  industry: 'industry',
  twitter: 'twitter',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isArchived: 'isArchived',
  isActive: 'isActive',
  entityName: 'entityName',
  isVerified: 'isVerified',
  isCaution: 'isCaution',
  st: 'st',
  verificationInfo: 'verificationInfo'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  photo: 'photo',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isVerified: 'isVerified',
  role: 'role',
  isTalentFilled: 'isTalentFilled',
  interests: 'interests',
  bio: 'bio',
  twitter: 'twitter',
  discord: 'discord',
  github: 'github',
  linkedin: 'linkedin',
  website: 'website',
  telegram: 'telegram',
  community: 'community',
  experience: 'experience',
  superteamLevel: 'superteamLevel',
  location: 'location',
  cryptoExperience: 'cryptoExperience',
  workPrefernce: 'workPrefernce',
  currentEmployer: 'currentEmployer',
  notifications: 'notifications',
  private: 'private',
  skills: 'skills',
  currentSponsorId: 'currentSponsorId',
  emailVerified: 'emailVerified',
  hackathonId: 'hackathonId',
  featureModalShown: 'featureModalShown',
  surveysShown: 'surveysShown',
  stRecommended: 'stRecommended',
  acceptedTOS: 'acceptedTOS',
  stLead: 'stLead',
  isBlocked: 'isBlocked',
  privyDid: 'privyDid',
  isKYCVerified: 'isKYCVerified',
  kycName: 'kycName',
  kycCountry: 'kycCountry',
  kycAddress: 'kycAddress',
  kycDOB: 'kycDOB',
  kycIDNumber: 'kycIDNumber',
  kycIDType: 'kycIDType'
};

exports.Prisma.ScoutsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  listingId: 'listingId',
  dollarsEarned: 'dollarsEarned',
  score: 'score',
  invited: 'invited',
  skills: 'skills',
  createdAt: 'createdAt'
};

exports.Prisma.TalentRankingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skill: 'skill',
  timeframe: 'timeframe',
  rank: 'rank',
  submissions: 'submissions',
  winRate: 'winRate',
  wins: 'wins',
  totalEarnedInUSD: 'totalEarnedInUSD'
};

exports.Prisma.PoWScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  skills: 'skills',
  link: 'link',
  createdAt: 'createdAt',
  subSkills: 'subSkills',
  updatedAt: 'updatedAt',
  like: 'like',
  likeCount: 'likeCount',
  ogImage: 'ogImage'
};

exports.Prisma.EmailSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category'
};

exports.Prisma.UserSponsorsScalarFieldEnum = {
  userId: 'userId',
  sponsorId: 'sponsorId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserInvitesScalarFieldEnum = {
  id: 'id',
  email: 'email',
  senderId: 'senderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sponsorId: 'sponsorId',
  memberType: 'memberType',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.EmailLogsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  type: 'type',
  bountyId: 'bountyId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResendLogsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  subject: 'subject',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscribeBountyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bountyId: 'bountyId',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscribeHackathonScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hackathonId: 'hackathonId',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.HackathonScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  logo: 'logo',
  sponsorId: 'sponsorId',
  deadline: 'deadline',
  startDate: 'startDate',
  description: 'description',
  altLogo: 'altLogo',
  announceDate: 'announceDate',
  eligibility: 'eligibility'
};

exports.Prisma.UnsubscribedEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt'
};

exports.Prisma.BlockedEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt'
};

exports.Prisma.CreditLedgerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  submissionId: 'submissionId',
  applicationId: 'applicationId',
  type: 'type',
  change: 'change',
  effectiveMonth: 'effectiveMonth',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.BountiesOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  token: 'token',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  applicationLink: 'applicationLink',
  requirements: 'requirements',
  templateId: 'templateId',
  region: 'region',
  pocSocials: 'pocSocials',
  timeToComplete: 'timeToComplete',
  referredBy: 'referredBy',
  hackathonId: 'hackathonId',
  language: 'language'
};

exports.Prisma.BountiesTemplatesOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  color: 'color',
  emoji: 'emoji',
  requirements: 'requirements',
  region: 'region',
  timeToComplete: 'timeToComplete',
  token: 'token',
  referredBy: 'referredBy',
  language: 'language',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  pocSocials: 'pocSocials'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  id: 'id',
  message: 'message',
  authorId: 'authorId',
  refId: 'refId',
  replyToId: 'replyToId',
  submissionId: 'submissionId'
};

exports.Prisma.GrantsOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  token: 'token',
  link: 'link',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  logo: 'logo',
  region: 'region',
  pocSocials: 'pocSocials',
  airtableId: 'airtableId',
  avgResponseTime: 'avgResponseTime',
  approverRecordId: 'approverRecordId',
  emailSender: 'emailSender',
  replyToEmail: 'replyToEmail',
  emailSalutation: 'emailSalutation',
  communityLink: 'communityLink'
};

exports.Prisma.GrantApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  grantId: 'grantId',
  projectTitle: 'projectTitle',
  projectOneLiner: 'projectOneLiner',
  projectDetails: 'projectDetails',
  projectTimeline: 'projectTimeline',
  proofOfWork: 'proofOfWork',
  walletAddress: 'walletAddress',
  twitter: 'twitter',
  github: 'github',
  milestones: 'milestones',
  kpi: 'kpi',
  decidedBy: 'decidedBy',
  notes: 'notes'
};

exports.Prisma.GrantTrancheOrderByRelevanceFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  grantId: 'grantId',
  update: 'update',
  helpWanted: 'helpWanted'
};

exports.Prisma.SubmissionOrderByRelevanceFieldEnum = {
  id: 'id',
  link: 'link',
  tweet: 'tweet',
  userId: 'userId',
  listingId: 'listingId',
  otherInfo: 'otherInfo',
  ogImage: 'ogImage',
  notes: 'notes'
};

exports.Prisma.SponsorsOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  url: 'url',
  industry: 'industry',
  twitter: 'twitter',
  bio: 'bio',
  entityName: 'entityName'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  photo: 'photo',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  interests: 'interests',
  bio: 'bio',
  twitter: 'twitter',
  discord: 'discord',
  github: 'github',
  linkedin: 'linkedin',
  website: 'website',
  telegram: 'telegram',
  community: 'community',
  experience: 'experience',
  superteamLevel: 'superteamLevel',
  location: 'location',
  cryptoExperience: 'cryptoExperience',
  workPrefernce: 'workPrefernce',
  currentEmployer: 'currentEmployer',
  currentSponsorId: 'currentSponsorId',
  hackathonId: 'hackathonId',
  stLead: 'stLead',
  privyDid: 'privyDid',
  kycName: 'kycName',
  kycCountry: 'kycCountry',
  kycAddress: 'kycAddress',
  kycDOB: 'kycDOB',
  kycIDNumber: 'kycIDNumber',
  kycIDType: 'kycIDType'
};

exports.Prisma.ScoutsOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  listingId: 'listingId'
};

exports.Prisma.TalentRankingsOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.PoWOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  link: 'link',
  ogImage: 'ogImage'
};

exports.Prisma.EmailSettingsOrderByRelevanceFieldEnum = {
  userId: 'userId',
  category: 'category'
};

exports.Prisma.UserSponsorsOrderByRelevanceFieldEnum = {
  userId: 'userId',
  sponsorId: 'sponsorId'
};

exports.Prisma.UserInvitesOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  senderId: 'senderId',
  sponsorId: 'sponsorId',
  token: 'token'
};

exports.Prisma.emailLogsOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  bountyId: 'bountyId',
  userId: 'userId'
};

exports.Prisma.ResendLogsOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  subject: 'subject',
  status: 'status'
};

exports.Prisma.SubscribeBountyOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  bountyId: 'bountyId'
};

exports.Prisma.SubscribeHackathonOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  hackathonId: 'hackathonId'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.HackathonOrderByRelevanceFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  logo: 'logo',
  sponsorId: 'sponsorId',
  description: 'description',
  altLogo: 'altLogo'
};

exports.Prisma.UnsubscribedEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.BlockedEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.CreditLedgerOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  submissionId: 'submissionId',
  applicationId: 'applicationId'
};
exports.status = exports.$Enums.status = {
  OPEN: 'OPEN',
  REVIEW: 'REVIEW',
  CLOSED: 'CLOSED',
  VERIFYING: 'VERIFYING',
  VERIFY_FAIL: 'VERIFY_FAIL'
};

exports.Source = exports.$Enums.Source = {
  NATIVE: 'NATIVE',
  IMPORT: 'IMPORT'
};

exports.BountyType = exports.$Enums.BountyType = {
  bounty: 'bounty',
  project: 'project',
  hackathon: 'hackathon'
};

exports.ApplicationType = exports.$Enums.ApplicationType = {
  rolling: 'rolling',
  fixed: 'fixed'
};

exports.CompensationType = exports.$Enums.CompensationType = {
  fixed: 'fixed',
  range: 'range',
  variable: 'variable'
};

exports.CommentRefType = exports.$Enums.CommentRefType = {
  BOUNTY: 'BOUNTY',
  SUBMISSION: 'SUBMISSION',
  GRANT_APPLICATION: 'GRANT_APPLICATION',
  POW: 'POW'
};

exports.CommentType = exports.$Enums.CommentType = {
  NORMAL: 'NORMAL',
  SUBMISSION: 'SUBMISSION',
  DEADLINE_EXTENSION: 'DEADLINE_EXTENSION',
  WINNER_ANNOUNCEMENT: 'WINNER_ANNOUNCEMENT'
};

exports.GrantStatus = exports.$Enums.GrantStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED'
};

exports.GrantApplicationStatus = exports.$Enums.GrantApplicationStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Completed: 'Completed',
  Rejected: 'Rejected'
};

exports.SubmissionLabels = exports.$Enums.SubmissionLabels = {
  Unreviewed: 'Unreviewed',
  Reviewed: 'Reviewed',
  Shortlisted: 'Shortlisted',
  Spam: 'Spam',
  Low_Quality: 'Low_Quality',
  Mid_Quality: 'Mid_Quality',
  High_Quality: 'High_Quality',
  Pending: 'Pending'
};

exports.GrantTrancheStatus = exports.$Enums.GrantTrancheStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Paid: 'Paid'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.TalentRankingSkills = exports.$Enums.TalentRankingSkills = {
  DEVELOPMENT: 'DEVELOPMENT',
  DESIGN: 'DESIGN',
  CONTENT: 'CONTENT',
  OTHER: 'OTHER',
  ALL: 'ALL'
};

exports.TalentRankingTimeframe = exports.$Enums.TalentRankingTimeframe = {
  THIS_YEAR: 'THIS_YEAR',
  LAST_30_DAYS: 'LAST_30_DAYS',
  LAST_7_DAYS: 'LAST_7_DAYS',
  ALL_TIME: 'ALL_TIME'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.EmailType = exports.$Enums.EmailType = {
  BOUNTY_REVIEW: 'BOUNTY_REVIEW',
  BOUNTY_DEADLINE: 'BOUNTY_DEADLINE',
  BOUNTY_DEADLINE_WEEK: 'BOUNTY_DEADLINE_WEEK',
  BOUNTY_CLOSE_DEADLINE: 'BOUNTY_CLOSE_DEADLINE',
  NO_VERIFICATION: 'NO_VERIFICATION',
  NO_ACTIVITY: 'NO_ACTIVITY',
  NO_REVIEW_SPONSOR_1: 'NO_REVIEW_SPONSOR_1',
  NO_REVIEW_SPONSOR_2: 'NO_REVIEW_SPONSOR_2',
  ROLLING_15_DAYS: 'ROLLING_15_DAYS',
  ROLLING_30_DAYS: 'ROLLING_30_DAYS',
  NEW_LISTING: 'NEW_LISTING',
  ROLLING_UNPUBLISH: 'ROLLING_UNPUBLISH',
  UNFILLED_PROFILE: 'UNFILLED_PROFILE',
  WALLET_ANNOUNCEMENT: 'WALLET_ANNOUNCEMENT',
  CREDITS_ANNOUNCEMENT: 'CREDITS_ANNOUNCEMENT',
  AUTO_GENERATE_ANNOUNCEMENT: 'AUTO_GENERATE_ANNOUNCEMENT'
};

exports.CreditEventType = exports.$Enums.CreditEventType = {
  SUBMISSION: 'SUBMISSION',
  SPAM_PENALTY: 'SPAM_PENALTY',
  WIN_BONUS: 'WIN_BONUS',
  MONTHLY_CREDIT: 'MONTHLY_CREDIT',
  CREDIT_REFUND: 'CREDIT_REFUND',
  GRANT_WIN_BONUS: 'GRANT_WIN_BONUS',
  GRANT_SPAM_PENALTY: 'GRANT_SPAM_PENALTY'
};

exports.Prisma.ModelName = {
  Bounties: 'Bounties',
  BountiesTemplates: 'BountiesTemplates',
  Comment: 'Comment',
  Grants: 'Grants',
  GrantApplication: 'GrantApplication',
  GrantTranche: 'GrantTranche',
  Submission: 'Submission',
  Sponsors: 'Sponsors',
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  Scouts: 'Scouts',
  TalentRankings: 'TalentRankings',
  PoW: 'PoW',
  EmailSettings: 'EmailSettings',
  UserSponsors: 'UserSponsors',
  UserInvites: 'UserInvites',
  emailLogs: 'emailLogs',
  ResendLogs: 'ResendLogs',
  SubscribeBounty: 'SubscribeBounty',
  SubscribeHackathon: 'SubscribeHackathon',
  VerificationToken: 'VerificationToken',
  Hackathon: 'Hackathon',
  UnsubscribedEmail: 'UnsubscribedEmail',
  BlockedEmail: 'BlockedEmail',
  CreditLedger: 'CreditLedger'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
