
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-compiler-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BountiesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  deadline: 'deadline',
  commitmentDate: 'commitmentDate',
  eligibility: 'eligibility',
  status: 'status',
  token: 'token',
  rewardAmount: 'rewardAmount',
  rewards: 'rewards',
  maxBonusSpots: 'maxBonusSpots',
  usdValue: 'usdValue',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  source: 'source',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  applicationLink: 'applicationLink',
  skills: 'skills',
  type: 'type',
  requirements: 'requirements',
  isWinnersAnnounced: 'isWinnersAnnounced',
  templateId: 'templateId',
  region: 'region',
  pocSocials: 'pocSocials',
  hackathonprize: 'hackathonprize',
  applicationType: 'applicationType',
  timeToComplete: 'timeToComplete',
  references: 'references',
  referredBy: 'referredBy',
  publishedAt: 'publishedAt',
  isPrivate: 'isPrivate',
  hackathonId: 'hackathonId',
  compensationType: 'compensationType',
  maxRewardAsk: 'maxRewardAsk',
  minRewardAsk: 'minRewardAsk',
  language: 'language',
  shouldSendEmail: 'shouldSendEmail',
  isFndnPaying: 'isFndnPaying',
  winnersAnnouncedAt: 'winnersAnnouncedAt',
  discordMessageIds: 'discordMessageIds'
};

exports.Prisma.BountiesTemplatesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  deadline: 'deadline',
  slug: 'slug',
  description: 'description',
  color: 'color',
  emoji: 'emoji',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  skills: 'skills',
  type: 'type',
  requirements: 'requirements',
  region: 'region',
  applicationType: 'applicationType',
  status: 'status',
  timeToComplete: 'timeToComplete',
  token: 'token',
  references: 'references',
  referredBy: 'referredBy',
  publishedAt: 'publishedAt',
  compensationType: 'compensationType',
  maxRewardAsk: 'maxRewardAsk',
  minRewardAsk: 'minRewardAsk',
  language: 'language',
  rewardAmount: 'rewardAmount',
  rewards: 'rewards',
  maxBonusSpots: 'maxBonusSpots',
  usdValue: 'usdValue',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  pocSocials: 'pocSocials',
  source: 'source',
  isPublished: 'isPublished'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  message: 'message',
  authorId: 'authorId',
  refType: 'refType',
  refId: 'refId',
  isActive: 'isActive',
  isArchived: 'isArchived',
  isPinned: 'isPinned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  replyToId: 'replyToId',
  submissionId: 'submissionId',
  type: 'type'
};

exports.Prisma.GrantsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  token: 'token',
  minReward: 'minReward',
  maxReward: 'maxReward',
  totalPaid: 'totalPaid',
  totalApproved: 'totalApproved',
  historicalApplications: 'historicalApplications',
  historicalPaid: 'historicalPaid',
  link: 'link',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  skills: 'skills',
  logo: 'logo',
  region: 'region',
  questions: 'questions',
  pocSocials: 'pocSocials',
  status: 'status',
  airtableId: 'airtableId',
  avgResponseTime: 'avgResponseTime',
  isNative: 'isNative',
  isPrivate: 'isPrivate',
  references: 'references',
  ai: 'ai',
  approverRecordId: 'approverRecordId',
  emailSender: 'emailSender',
  replyToEmail: 'replyToEmail',
  emailSalutation: 'emailSalutation',
  communityLink: 'communityLink'
};

exports.Prisma.GrantApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  grantId: 'grantId',
  applicationStatus: 'applicationStatus',
  projectTitle: 'projectTitle',
  projectOneLiner: 'projectOneLiner',
  projectDetails: 'projectDetails',
  projectTimeline: 'projectTimeline',
  proofOfWork: 'proofOfWork',
  walletAddress: 'walletAddress',
  twitter: 'twitter',
  github: 'github',
  milestones: 'milestones',
  kpi: 'kpi',
  answers: 'answers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  label: 'label',
  ask: 'ask',
  approvedAmount: 'approvedAmount',
  approvedAmountInUSD: 'approvedAmountInUSD',
  decidedAt: 'decidedAt',
  totalPaid: 'totalPaid',
  isShipped: 'isShipped',
  paymentDetails: 'paymentDetails',
  totalTranches: 'totalTranches',
  like: 'like',
  likeCount: 'likeCount',
  decidedBy: 'decidedBy',
  notes: 'notes',
  ai: 'ai'
};

exports.Prisma.GrantTrancheScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  grantId: 'grantId',
  ask: 'ask',
  update: 'update',
  helpWanted: 'helpWanted',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAmount: 'approvedAmount',
  decidedAt: 'decidedAt',
  trancheNumber: 'trancheNumber'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  link: 'link',
  tweet: 'tweet',
  status: 'status',
  eligibilityAnswers: 'eligibilityAnswers',
  userId: 'userId',
  listingId: 'listingId',
  isWinner: 'isWinner',
  winnerPosition: 'winnerPosition',
  isActive: 'isActive',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  like: 'like',
  likeCount: 'likeCount',
  isPaid: 'isPaid',
  paymentDetails: 'paymentDetails',
  otherInfo: 'otherInfo',
  ask: 'ask',
  label: 'label',
  rewardInUSD: 'rewardInUSD',
  ogImage: 'ogImage',
  notes: 'notes'
};

exports.Prisma.SponsorsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  url: 'url',
  industry: 'industry',
  twitter: 'twitter',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isArchived: 'isArchived',
  isActive: 'isActive',
  entityName: 'entityName',
  isVerified: 'isVerified',
  isCaution: 'isCaution',
  st: 'st',
  verificationInfo: 'verificationInfo'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  photo: 'photo',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isVerified: 'isVerified',
  role: 'role',
  isTalentFilled: 'isTalentFilled',
  interests: 'interests',
  bio: 'bio',
  twitter: 'twitter',
  discord: 'discord',
  github: 'github',
  linkedin: 'linkedin',
  website: 'website',
  telegram: 'telegram',
  community: 'community',
  experience: 'experience',
  superteamLevel: 'superteamLevel',
  location: 'location',
  cryptoExperience: 'cryptoExperience',
  workPrefernce: 'workPrefernce',
  currentEmployer: 'currentEmployer',
  notifications: 'notifications',
  private: 'private',
  skills: 'skills',
  currentSponsorId: 'currentSponsorId',
  emailVerified: 'emailVerified',
  hackathonId: 'hackathonId',
  featureModalShown: 'featureModalShown',
  surveysShown: 'surveysShown',
  stRecommended: 'stRecommended',
  acceptedTOS: 'acceptedTOS',
  stLead: 'stLead',
  isBlocked: 'isBlocked',
  privyDid: 'privyDid',
  isKYCVerified: 'isKYCVerified',
  kycName: 'kycName',
  kycCountry: 'kycCountry',
  kycAddress: 'kycAddress',
  kycDOB: 'kycDOB',
  kycIDNumber: 'kycIDNumber',
  kycIDType: 'kycIDType'
};

exports.Prisma.ScoutsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  listingId: 'listingId',
  dollarsEarned: 'dollarsEarned',
  score: 'score',
  invited: 'invited',
  skills: 'skills',
  createdAt: 'createdAt'
};

exports.Prisma.TalentRankingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skill: 'skill',
  timeframe: 'timeframe',
  rank: 'rank',
  submissions: 'submissions',
  winRate: 'winRate',
  wins: 'wins',
  totalEarnedInUSD: 'totalEarnedInUSD'
};

exports.Prisma.PoWScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  skills: 'skills',
  link: 'link',
  createdAt: 'createdAt',
  subSkills: 'subSkills',
  updatedAt: 'updatedAt',
  like: 'like',
  likeCount: 'likeCount',
  ogImage: 'ogImage'
};

exports.Prisma.EmailSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category'
};

exports.Prisma.UserSponsorsScalarFieldEnum = {
  userId: 'userId',
  sponsorId: 'sponsorId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserInvitesScalarFieldEnum = {
  id: 'id',
  email: 'email',
  senderId: 'senderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sponsorId: 'sponsorId',
  memberType: 'memberType',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.EmailLogsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  type: 'type',
  bountyId: 'bountyId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResendLogsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  subject: 'subject',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscribeBountyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bountyId: 'bountyId',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscribeHackathonScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hackathonId: 'hackathonId',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.HackathonScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  logo: 'logo',
  sponsorId: 'sponsorId',
  deadline: 'deadline',
  startDate: 'startDate',
  description: 'description',
  altLogo: 'altLogo',
  announceDate: 'announceDate',
  eligibility: 'eligibility'
};

exports.Prisma.UnsubscribedEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt'
};

exports.Prisma.BlockedEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt'
};

exports.Prisma.CreditLedgerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  submissionId: 'submissionId',
  applicationId: 'applicationId',
  type: 'type',
  change: 'change',
  effectiveMonth: 'effectiveMonth',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.BountiesOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  token: 'token',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  applicationLink: 'applicationLink',
  requirements: 'requirements',
  templateId: 'templateId',
  region: 'region',
  pocSocials: 'pocSocials',
  timeToComplete: 'timeToComplete',
  referredBy: 'referredBy',
  hackathonId: 'hackathonId',
  language: 'language'
};

exports.Prisma.BountiesTemplatesOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  color: 'color',
  emoji: 'emoji',
  requirements: 'requirements',
  region: 'region',
  timeToComplete: 'timeToComplete',
  token: 'token',
  referredBy: 'referredBy',
  language: 'language',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  pocSocials: 'pocSocials'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  id: 'id',
  message: 'message',
  authorId: 'authorId',
  refId: 'refId',
  replyToId: 'replyToId',
  submissionId: 'submissionId'
};

exports.Prisma.GrantsOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  token: 'token',
  link: 'link',
  sponsorId: 'sponsorId',
  pocId: 'pocId',
  logo: 'logo',
  region: 'region',
  pocSocials: 'pocSocials',
  airtableId: 'airtableId',
  avgResponseTime: 'avgResponseTime',
  approverRecordId: 'approverRecordId',
  emailSender: 'emailSender',
  replyToEmail: 'replyToEmail',
  emailSalutation: 'emailSalutation',
  communityLink: 'communityLink'
};

exports.Prisma.GrantApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  grantId: 'grantId',
  projectTitle: 'projectTitle',
  projectOneLiner: 'projectOneLiner',
  projectDetails: 'projectDetails',
  projectTimeline: 'projectTimeline',
  proofOfWork: 'proofOfWork',
  walletAddress: 'walletAddress',
  twitter: 'twitter',
  github: 'github',
  milestones: 'milestones',
  kpi: 'kpi',
  decidedBy: 'decidedBy',
  notes: 'notes'
};

exports.Prisma.GrantTrancheOrderByRelevanceFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  grantId: 'grantId',
  update: 'update',
  helpWanted: 'helpWanted'
};

exports.Prisma.SubmissionOrderByRelevanceFieldEnum = {
  id: 'id',
  link: 'link',
  tweet: 'tweet',
  userId: 'userId',
  listingId: 'listingId',
  otherInfo: 'otherInfo',
  ogImage: 'ogImage',
  notes: 'notes'
};

exports.Prisma.SponsorsOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  url: 'url',
  industry: 'industry',
  twitter: 'twitter',
  bio: 'bio',
  entityName: 'entityName'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  photo: 'photo',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  interests: 'interests',
  bio: 'bio',
  twitter: 'twitter',
  discord: 'discord',
  github: 'github',
  linkedin: 'linkedin',
  website: 'website',
  telegram: 'telegram',
  community: 'community',
  experience: 'experience',
  superteamLevel: 'superteamLevel',
  location: 'location',
  cryptoExperience: 'cryptoExperience',
  workPrefernce: 'workPrefernce',
  currentEmployer: 'currentEmployer',
  currentSponsorId: 'currentSponsorId',
  hackathonId: 'hackathonId',
  stLead: 'stLead',
  privyDid: 'privyDid',
  kycName: 'kycName',
  kycCountry: 'kycCountry',
  kycAddress: 'kycAddress',
  kycDOB: 'kycDOB',
  kycIDNumber: 'kycIDNumber',
  kycIDType: 'kycIDType'
};

exports.Prisma.ScoutsOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  listingId: 'listingId'
};

exports.Prisma.TalentRankingsOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.PoWOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  link: 'link',
  ogImage: 'ogImage'
};

exports.Prisma.EmailSettingsOrderByRelevanceFieldEnum = {
  userId: 'userId',
  category: 'category'
};

exports.Prisma.UserSponsorsOrderByRelevanceFieldEnum = {
  userId: 'userId',
  sponsorId: 'sponsorId'
};

exports.Prisma.UserInvitesOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  senderId: 'senderId',
  sponsorId: 'sponsorId',
  token: 'token'
};

exports.Prisma.emailLogsOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  bountyId: 'bountyId',
  userId: 'userId'
};

exports.Prisma.ResendLogsOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  subject: 'subject',
  status: 'status'
};

exports.Prisma.SubscribeBountyOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  bountyId: 'bountyId'
};

exports.Prisma.SubscribeHackathonOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  hackathonId: 'hackathonId'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.HackathonOrderByRelevanceFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  logo: 'logo',
  sponsorId: 'sponsorId',
  description: 'description',
  altLogo: 'altLogo'
};

exports.Prisma.UnsubscribedEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.BlockedEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.CreditLedgerOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  submissionId: 'submissionId',
  applicationId: 'applicationId'
};
exports.CreditEventType = exports.$Enums.CreditEventType = {
  SUBMISSION: 'SUBMISSION',
  SPAM_PENALTY: 'SPAM_PENALTY',
  WIN_BONUS: 'WIN_BONUS',
  MONTHLY_CREDIT: 'MONTHLY_CREDIT',
  CREDIT_REFUND: 'CREDIT_REFUND',
  GRANT_WIN_BONUS: 'GRANT_WIN_BONUS',
  GRANT_SPAM_PENALTY: 'GRANT_SPAM_PENALTY'
};

exports.TalentRankingSkills = exports.$Enums.TalentRankingSkills = {
  DEVELOPMENT: 'DEVELOPMENT',
  DESIGN: 'DESIGN',
  CONTENT: 'CONTENT',
  OTHER: 'OTHER',
  ALL: 'ALL'
};

exports.EmailType = exports.$Enums.EmailType = {
  BOUNTY_REVIEW: 'BOUNTY_REVIEW',
  BOUNTY_DEADLINE: 'BOUNTY_DEADLINE',
  BOUNTY_DEADLINE_WEEK: 'BOUNTY_DEADLINE_WEEK',
  BOUNTY_CLOSE_DEADLINE: 'BOUNTY_CLOSE_DEADLINE',
  NO_VERIFICATION: 'NO_VERIFICATION',
  NO_ACTIVITY: 'NO_ACTIVITY',
  NO_REVIEW_SPONSOR_1: 'NO_REVIEW_SPONSOR_1',
  NO_REVIEW_SPONSOR_2: 'NO_REVIEW_SPONSOR_2',
  ROLLING_15_DAYS: 'ROLLING_15_DAYS',
  ROLLING_30_DAYS: 'ROLLING_30_DAYS',
  NEW_LISTING: 'NEW_LISTING',
  ROLLING_UNPUBLISH: 'ROLLING_UNPUBLISH',
  UNFILLED_PROFILE: 'UNFILLED_PROFILE',
  WALLET_ANNOUNCEMENT: 'WALLET_ANNOUNCEMENT',
  CREDITS_ANNOUNCEMENT: 'CREDITS_ANNOUNCEMENT',
  AUTO_GENERATE_ANNOUNCEMENT: 'AUTO_GENERATE_ANNOUNCEMENT'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.Source = exports.$Enums.Source = {
  NATIVE: 'NATIVE',
  IMPORT: 'IMPORT'
};

exports.ApplicationType = exports.$Enums.ApplicationType = {
  rolling: 'rolling',
  fixed: 'fixed'
};

exports.status = exports.$Enums.status = {
  OPEN: 'OPEN',
  REVIEW: 'REVIEW',
  CLOSED: 'CLOSED',
  VERIFYING: 'VERIFYING',
  VERIFY_FAIL: 'VERIFY_FAIL'
};

exports.GrantStatus = exports.$Enums.GrantStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED'
};

exports.GrantApplicationStatus = exports.$Enums.GrantApplicationStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Completed: 'Completed',
  Rejected: 'Rejected'
};

exports.BountyType = exports.$Enums.BountyType = {
  bounty: 'bounty',
  project: 'project',
  hackathon: 'hackathon'
};

exports.CommentRefType = exports.$Enums.CommentRefType = {
  BOUNTY: 'BOUNTY',
  SUBMISSION: 'SUBMISSION',
  GRANT_APPLICATION: 'GRANT_APPLICATION',
  POW: 'POW'
};

exports.CommentType = exports.$Enums.CommentType = {
  NORMAL: 'NORMAL',
  SUBMISSION: 'SUBMISSION',
  DEADLINE_EXTENSION: 'DEADLINE_EXTENSION',
  WINNER_ANNOUNCEMENT: 'WINNER_ANNOUNCEMENT'
};

exports.JobType = exports.$Enums.JobType = {
  parttime: 'parttime',
  fulltime: 'fulltime',
  internship: 'internship'
};

exports.CompensationType = exports.$Enums.CompensationType = {
  fixed: 'fixed',
  range: 'range',
  variable: 'variable'
};

exports.SubmissionLabels = exports.$Enums.SubmissionLabels = {
  Unreviewed: 'Unreviewed',
  Reviewed: 'Reviewed',
  Shortlisted: 'Shortlisted',
  Spam: 'Spam',
  Low_Quality: 'Low_Quality',
  Mid_Quality: 'Mid_Quality',
  High_Quality: 'High_Quality',
  Pending: 'Pending'
};

exports.TalentRankingTimeframe = exports.$Enums.TalentRankingTimeframe = {
  THIS_YEAR: 'THIS_YEAR',
  LAST_30_DAYS: 'LAST_30_DAYS',
  LAST_7_DAYS: 'LAST_7_DAYS',
  ALL_TIME: 'ALL_TIME'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.GrantTrancheStatus = exports.$Enums.GrantTrancheStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Paid: 'Paid'
};

exports.Prisma.ModelName = {
  Bounties: 'Bounties',
  BountiesTemplates: 'BountiesTemplates',
  Comment: 'Comment',
  Grants: 'Grants',
  GrantApplication: 'GrantApplication',
  GrantTranche: 'GrantTranche',
  Submission: 'Submission',
  Sponsors: 'Sponsors',
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  Scouts: 'Scouts',
  TalentRankings: 'TalentRankings',
  PoW: 'PoW',
  EmailSettings: 'EmailSettings',
  UserSponsors: 'UserSponsors',
  UserInvites: 'UserInvites',
  emailLogs: 'emailLogs',
  ResendLogs: 'ResendLogs',
  SubscribeBounty: 'SubscribeBounty',
  SubscribeHackathon: 'SubscribeHackathon',
  VerificationToken: 'VerificationToken',
  Hackathon: 'Hackathon',
  UnsubscribedEmail: 'UnsubscribedEmail',
  BlockedEmail: 'BlockedEmail',
  CreditLedger: 'CreditLedger'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/abhwshek/Documents/Projects/earn/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "queryCompiler"
    ],
    "sourceFilePath": "/Users/abhwshek/Documents/Projects/earn/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.10.1",
  "engineVersion": "9b628578b3b7cae625e8c927178f15a170e74a9c",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"queryCompiler\", \"driverAdapters\"]\n  output          = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\nmodel Bounties {\n  id                 String             @id @default(uuid())\n  title              String\n  slug               String             @unique\n  description        String?            @db.LongText\n  deadline           DateTime?\n  commitmentDate     DateTime?\n  eligibility        Json?\n  status             status             @default(OPEN)\n  token              String?\n  rewardAmount       Float?\n  rewards            Json?\n  maxBonusSpots      Int                @default(0)\n  usdValue           Float?\n  sponsorId          String\n  pocId              String\n  source             Source             @default(NATIVE)\n  isPublished        Boolean            @default(false)\n  isFeatured         Boolean            @default(false)\n  isActive           Boolean            @default(true)\n  isArchived         Boolean            @default(false)\n  createdAt          DateTime           @default(now())\n  updatedAt          DateTime           @updatedAt\n  applicationLink    String?\n  skills             Json?\n  type               BountyType         @default(bounty)\n  requirements       String?            @db.Text\n  isWinnersAnnounced Boolean            @default(false)\n  templateId         String?\n  region             String             @default(\"Global\")\n  pocSocials         String?\n  hackathonprize     Boolean            @default(false)\n  applicationType    ApplicationType    @default(fixed)\n  timeToComplete     String?\n  references         Json?\n  referredBy         String?\n  publishedAt        DateTime?\n  isPrivate          Boolean            @default(false)\n  hackathonId        String?\n  compensationType   CompensationType   @default(fixed)\n  maxRewardAsk       Int?\n  minRewardAsk       Int?\n  template           BountiesTemplates? @relation(fields: [templateId], references: [id])\n  sponsor            Sponsors           @relation(fields: [sponsorId], references: [id])\n  poc                User               @relation(\"poc\", fields: [pocId], references: [id])\n  language           String?\n  shouldSendEmail    Boolean            @default(true)\n  isFndnPaying       Boolean            @default(false)\n  Submission         Submission[]\n  SubscribeBounty    SubscribeBounty[]\n  Hackathon          Hackathon?         @relation(fields: [hackathonId], references: [id])\n  winnersAnnouncedAt DateTime?\n  Scouts             Scouts[]\n  Comments           Comment[]\n  discordMessageIds  Json?\n\n  @@index([id, slug])\n  @@index([sponsorId])\n  @@index([pocId])\n  @@index([templateId])\n  @@index([hackathonId])\n  @@index([isPublished, isPrivate])\n  @@index([deadline, updatedAt])\n  @@index([isWinnersAnnounced])\n  @@index([title])\n  @@index([deadline(sort: Asc)], map: \"Bounties_deadline_asc_idx\")\n  @@index([deadline(sort: Desc)], map: \"Bounties_deadline_desc_idx\")\n  @@index([winnersAnnouncedAt(sort: Desc)])\n  @@index([isFeatured(sort: Desc)])\n  @@index([isPublished, isActive, isArchived, status])\n  @@index([isPublished, isActive, isArchived, isPrivate, status])\n  @@index([sponsorId, isArchived, isPublished, isActive])\n  @@index([isPublished, isActive, isPrivate, hackathonprize])\n  @@index([compensationType, usdValue])\n  @@index([compensationType, maxRewardAsk])\n  @@index([isWinnersAnnounced, isPublished, status])\n  @@index([region, isPublished, status])\n}\n\nmodel BountiesTemplates {\n  id               String           @id @default(uuid())\n  title            String?\n  deadline         DateTime?\n  slug             String?\n  description      String?          @db.Text\n  color            String?\n  emoji            String?\n  isFeatured       Boolean          @default(false)\n  isActive         Boolean          @default(true)\n  isArchived       Boolean          @default(false)\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n  skills           Json?\n  type             BountyType       @default(bounty)\n  requirements     String?          @db.Text\n  region           String           @default(\"Global\")\n  applicationType  ApplicationType  @default(fixed)\n  status           status           @default(OPEN)\n  timeToComplete   String?\n  token            String?\n  references       Json?\n  referredBy       String?\n  publishedAt      DateTime?\n  compensationType CompensationType @default(fixed)\n  maxRewardAsk     Int?\n  minRewardAsk     Int?\n  language         String?\n  rewardAmount     Float?\n  rewards          Json?\n  maxBonusSpots    Int              @default(0)\n  usdValue         Float?\n  sponsorId        String\n  pocId            String\n  pocSocials       String?\n  source           Source           @default(NATIVE)\n  isPublished      Boolean          @default(false)\n  Bounties         Bounties[]\n  sponsor          Sponsors         @relation(fields: [sponsorId], references: [id])\n  poc              User             @relation(\"poc\", fields: [pocId], references: [id])\n\n  @@index([isActive, isArchived, type])\n  @@index([pocId])\n  @@index([sponsorId])\n  @@index([type])\n}\n\nmodel Comment {\n  id               String            @id @default(uuid())\n  message          String            @db.VarChar(5000)\n  authorId         String\n  refType          CommentRefType    @default(BOUNTY)\n  refId            String\n  isActive         Boolean           @default(true)\n  isArchived       Boolean           @default(false)\n  isPinned         Boolean           @default(false)\n  createdAt        DateTime          @default(now())\n  updatedAt        DateTime          @updatedAt\n  replyToId        String?\n  submissionId     String?\n  type             CommentType       @default(NORMAL)\n  author           User              @relation(fields: [authorId], references: [id])\n  repliedTo        Comment?          @relation(\"CommentReplies\", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  replies          Comment[]         @relation(\"CommentReplies\")\n  listing          Bounties?         @relation(fields: [refId], references: [id], map: \"Comment_Listing_fkey\")\n  submission       Submission?       @relation(fields: [refId], references: [id], map: \"Comment_Submission_fkey\")\n  pow              PoW?              @relation(fields: [refId], references: [id], map: \"Comment_PoW_fkey\")\n  GrantApplication GrantApplication? @relation(fields: [refId], references: [id], map: \"Comment_GrantApplication_fkey\")\n\n  @@index([id, refId])\n  @@index([authorId])\n  @@index([replyToId])\n  @@index([refId])\n  @@index([refId, isActive, isArchived, type])\n  @@index([refId, isActive, isArchived, replyToId])\n  @@index([refType, type])\n  @@index([updatedAt(sort: Desc)])\n  @@index([refId, isPinned])\n}\n\nmodel Grants {\n  id                     String             @id @default(uuid())\n  title                  String\n  slug                   String             @unique\n  description            String?            @db.Text\n  shortDescription       String?            @db.VarChar(1000)\n  token                  String?\n  minReward              Float?\n  maxReward              Float?\n  totalPaid              Float              @default(0)\n  totalApproved          Float              @default(0)\n  historicalApplications Int                @default(0)\n  historicalPaid         Float              @default(0)\n  link                   String?\n  sponsorId              String\n  pocId                  String\n  isPublished            Boolean            @default(false)\n  isFeatured             Boolean            @default(false)\n  isActive               Boolean            @default(true)\n  isArchived             Boolean            @default(false)\n  createdAt              DateTime           @default(now())\n  updatedAt              DateTime           @updatedAt\n  skills                 Json?\n  logo                   String?\n  region                 String             @default(\"Global\")\n  sponsor                Sponsors           @relation(fields: [sponsorId], references: [id])\n  poc                    User               @relation(fields: [pocId], references: [id])\n  questions              Json?\n  pocSocials             String?\n  status                 GrantStatus        @default(OPEN)\n  GrantApplication       GrantApplication[]\n  airtableId             String?\n  avgResponseTime        String?            @default(\"24h\")\n  isNative               Boolean            @default(false)\n  isPrivate              Boolean            @default(false)\n  references             Json?\n  ai                     Json?\n  GrantTranche           GrantTranche[]\n  approverRecordId       String?\n  emailSender            String?\n  replyToEmail           String?\n  emailSalutation        String?\n  communityLink          String?\n\n  @@index([id, slug])\n  @@index([pocId])\n  @@index([sponsorId])\n  @@index([isPublished, isActive, isArchived, isPrivate])\n  @@index([isPublished, isActive, isArchived, status])\n  @@index([region, isPublished, isActive])\n  @@index([slug])\n  @@index([sponsorId, isActive, isArchived, status])\n  @@index([createdAt(sort: Desc)])\n  @@index([totalApproved(sort: Desc)])\n}\n\nmodel GrantApplication {\n  id                  String                 @id @default(uuid())\n  userId              String\n  grantId             String\n  applicationStatus   GrantApplicationStatus @default(Pending)\n  projectTitle        String\n  projectOneLiner     String\n  projectDetails      String                 @db.Text\n  projectTimeline     String\n  proofOfWork         String                 @db.Text\n  walletAddress       String\n  twitter             String?\n  github              String?\n  milestones          String?                @db.Text\n  kpi                 String?                @db.Text\n  answers             Json?                  @default(\"[]\")\n  createdAt           DateTime               @default(now())\n  updatedAt           DateTime               @updatedAt\n  user                User                   @relation(fields: [userId], references: [id])\n  grant               Grants                 @relation(fields: [grantId], references: [id])\n  label               SubmissionLabels       @default(Pending)\n  ask                 Float                  @default(0)\n  approvedAmount      Float                  @default(0)\n  approvedAmountInUSD Float                  @default(0)\n  decidedAt           DateTime?\n  totalPaid           Float                  @default(0)\n  isShipped           Boolean                @default(false)\n  paymentDetails      Json?\n  totalTranches       Int                    @default(0)\n  like                Json?\n  likeCount           Int                    @default(0)\n  Comments            Comment[]\n  decidedBy           String?\n  notes               String?                @db.VarChar(1000)\n  ai                  Json?\n  GrantTranche        GrantTranche[]\n  CreditLedger        CreditLedger[]\n\n  @@index([userId])\n  @@index([grantId])\n  @@index([likeCount])\n  @@index([grantId, userId, applicationStatus])\n  @@index([applicationStatus, decidedAt])\n  @@index([applicationStatus, createdAt])\n  @@index([userId, grantId, createdAt])\n  @@index([decidedAt(sort: Desc)])\n  @@index([createdAt(sort: Desc)])\n  @@index([approvedAmountInUSD(sort: Desc)])\n}\n\nmodel GrantTranche {\n  id               String             @id @default(uuid())\n  applicationId    String\n  grantId          String\n  ask              Float\n  update           String?            @db.Text\n  helpWanted       String?            @db.Text\n  status           GrantTrancheStatus @default(Pending)\n  createdAt        DateTime           @default(now())\n  updatedAt        DateTime           @updatedAt\n  GrantApplication GrantApplication   @relation(fields: [applicationId], references: [id])\n  Grant            Grants             @relation(fields: [grantId], references: [id])\n  approvedAmount   Float?\n  decidedAt        DateTime?\n  trancheNumber    Int\n\n  @@index([applicationId])\n  @@index([grantId])\n}\n\nmodel Submission {\n  id                 String           @id @default(uuid())\n  link               String?          @db.VarChar(500)\n  tweet              String?          @db.VarChar(500)\n  status             SubmissionStatus @default(Pending)\n  eligibilityAnswers Json?            @default(\"[]\")\n  userId             String\n  listingId          String\n  isWinner           Boolean          @default(false)\n  winnerPosition     Int?\n  isActive           Boolean          @default(true)\n  isArchived         Boolean          @default(false)\n  createdAt          DateTime         @default(now())\n  updatedAt          DateTime         @updatedAt\n  like               Json?\n  likeCount          Int              @default(0)\n  isPaid             Boolean          @default(false)\n  paymentDetails     Json?\n  otherInfo          String?          @db.Text\n  ask                Int?\n  label              SubmissionLabels @default(Unreviewed)\n  rewardInUSD        Float            @default(0)\n  listing            Bounties         @relation(fields: [listingId], references: [id])\n  user               User             @relation(fields: [userId], references: [id])\n  ogImage            String?          @db.Text\n  notes              String?          @db.VarChar(1000)\n  Comments           Comment[]\n  CreditLedger       CreditLedger[]\n\n  @@index([id, listingId])\n  @@index([userId])\n  @@index([listingId])\n  @@index([isWinner])\n  @@index([createdAt, isWinner])\n  @@index([createdAt, listingId])\n  @@index([likeCount])\n  @@index([listingId, isActive, isArchived])\n  @@index([listingId, userId, isActive, isArchived])\n  @@index([listingId, isWinner, isActive, isArchived])\n  @@index([userId, listingId, createdAt])\n  @@index([createdAt(sort: Desc)])\n  @@index([likeCount(sort: Desc), createdAt(sort: Desc)])\n}\n\nmodel Sponsors {\n  id               String              @id @default(uuid())\n  name             String              @unique\n  slug             String              @unique\n  logo             String?\n  url              String?\n  industry         String\n  twitter          String?\n  bio              String?\n  createdAt        DateTime            @default(now())\n  updatedAt        DateTime            @updatedAt\n  isArchived       Boolean             @default(false)\n  isActive         Boolean             @default(true)\n  entityName       String?\n  isVerified       Boolean             @default(false)\n  isCaution        Boolean             @default(false)\n  st               Boolean             @default(false)\n  verificationInfo Json?\n  Hackathon        Hackathon?\n  UserSponsors     UserSponsors[]\n  Bounties         Bounties[]\n  Templates        BountiesTemplates[]\n  Grants           Grants[]\n  User             User[]\n  UserInvites      UserInvites[]\n\n  @@index([id, slug])\n  @@index([isVerified, st])\n  @@index([isCaution, isVerified])\n  @@index([isActive, isArchived])\n}\n\nmodel Account {\n  id                String  @id @default(uuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id           String   @id @default(uuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nmodel User {\n  id                 String               @id @default(uuid())\n  publicKey          String?\n  walletAddress      String?\n  email              String               @unique\n  username           String?              @unique\n  photo              String?              @db.Text\n  firstName          String?              @db.VarChar(255)\n  lastName           String?              @db.VarChar(255)\n  createdAt          DateTime             @default(now())\n  updatedAt          DateTime             @updatedAt\n  isVerified         Boolean              @default(false)\n  role               String               @default(\"USER\")\n  isTalentFilled     Boolean              @default(false)\n  interests          String?              @db.Text\n  bio                String?              @db.Text\n  twitter            String?              @db.Text\n  discord            String?              @db.Text\n  github             String?              @db.Text\n  linkedin           String?              @db.Text\n  website            String?              @db.Text\n  telegram           String?              @db.Text\n  community          String?              @db.Text\n  experience         String?\n  superteamLevel     String?\n  location           String?\n  cryptoExperience   String?\n  workPrefernce      String?\n  currentEmployer    String?\n  notifications      Json?\n  private            Boolean              @default(false)\n  skills             Json?\n  currentSponsorId   String?\n  emailVerified      DateTime?\n  hackathonId        String?\n  featureModalShown  Boolean              @default(false)\n  surveysShown       Json?\n  stRecommended      Boolean              @default(false)\n  acceptedTOS        Boolean              @default(false)\n  stLead             String?\n  currentSponsor     Sponsors?            @relation(fields: [currentSponsorId], references: [id])\n  UserSponsors       UserSponsors[]\n  poc                Bounties[]           @relation(\"poc\")\n  templates          BountiesTemplates[]  @relation(\"poc\")\n  Comment            Comment[]\n  Submission         Submission[]\n  Grants             Grants[]\n  UserInvites        UserInvites[]\n  SubscribeBounty    SubscribeBounty[]\n  PoW                PoW[]\n  accounts           Account[]\n  sessions           Session[]\n  Hackathon          Hackathon?           @relation(fields: [hackathonId], references: [id])\n  emailSettings      EmailSettings[]\n  TalentRankings     TalentRankings[]\n  Scouts             Scouts[]\n  GrantApplication   GrantApplication[]\n  SubscribeHackathon SubscribeHackathon[]\n  isBlocked          Boolean              @default(false)\n  privyDid           String               @unique\n  isKYCVerified      Boolean              @default(false)\n  kycName            String?\n  kycCountry         String?\n  kycAddress         String?\n  kycDOB             String?\n  kycIDNumber        String?\n  kycIDType          String?\n  CreditLedger       CreditLedger[]\n\n  @@index([currentSponsorId])\n  @@index([hackathonId])\n  @@index([email])\n  @@index([username])\n  @@index([firstName])\n  @@index([lastName])\n  @@index([location])\n}\n\nmodel Scouts {\n  id            String   @id @default(uuid())\n  userId        String\n  listingId     String\n  dollarsEarned Int\n  score         Decimal  @db.Decimal(9, 2)\n  invited       Boolean\n  skills        Json\n  createdAt     DateTime @default(now())\n  listing       Bounties @relation(fields: [listingId], references: [id])\n  user          User     @relation(fields: [userId], references: [id])\n\n  @@unique([userId, listingId])\n  @@index([listingId])\n  @@index([listingId, invited])\n  @@index([listingId, score(sort: Desc)])\n  @@index([userId, listingId, invited])\n  @@index([score(sort: Desc)])\n}\n\nmodel TalentRankings {\n  id               String                 @id @default(uuid())\n  userId           String\n  skill            TalentRankingSkills    @default(ALL)\n  timeframe        TalentRankingTimeframe @default(ALL_TIME)\n  rank             Int\n  submissions      Int                    @default(0)\n  winRate          Int                    @default(0)\n  wins             Int                    @default(0)\n  totalEarnedInUSD Int\n  user             User                   @relation(fields: [userId], references: [id])\n\n  @@unique([userId, skill, timeframe])\n  @@index([skill, timeframe])\n  @@index([skill, timeframe, rank(sort: Asc)])\n  @@index([totalEarnedInUSD(sort: Desc)])\n  @@index([rank(sort: Asc)])\n  @@index([winRate(sort: Desc)])\n}\n\nmodel PoW {\n  id          String    @id @default(uuid())\n  userId      String\n  title       String\n  description String    @db.Text\n  skills      Json?\n  link        String    @db.Text\n  createdAt   DateTime  @default(now())\n  subSkills   Json?\n  updatedAt   DateTime  @updatedAt\n  like        Json?\n  likeCount   Int       @default(0)\n  user        User      @relation(fields: [userId], references: [id])\n  ogImage     String?   @db.Text\n  Comments    Comment[]\n\n  @@index([userId])\n  @@index([createdAt])\n  @@index([likeCount])\n  @@index([likeCount(sort: Desc), createdAt(sort: Desc)])\n  @@index([userId, createdAt(sort: Desc)])\n  @@index([userId, id])\n}\n\nmodel EmailSettings {\n  id       Int    @id @default(autoincrement())\n  userId   String\n  category String\n  user     User   @relation(fields: [userId], references: [id])\n\n  @@index([userId, category])\n  @@index([userId])\n  @@index([category])\n}\n\nmodel UserSponsors {\n  userId    String\n  sponsorId String\n  role      Role     @default(MEMBER)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  user      User     @relation(fields: [userId], references: [id])\n  sponsor   Sponsors @relation(fields: [sponsorId], references: [id])\n\n  @@id([userId, sponsorId])\n  @@index([sponsorId])\n}\n\nmodel UserInvites {\n  id         String   @id @default(uuid())\n  email      String\n  senderId   String\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n  sponsorId  String\n  memberType Role     @default(MEMBER)\n  token      String   @unique\n  expires    DateTime\n  sender     User     @relation(fields: [senderId], references: [id])\n  sponsor    Sponsors @relation(fields: [sponsorId], references: [id])\n\n  @@index([senderId])\n  @@index([sponsorId])\n}\n\nmodel emailLogs {\n  id        String    @id @default(uuid())\n  email     String?\n  type      EmailType\n  bountyId  String?\n  userId    String?\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  @@index([bountyId, type])\n  @@index([userId, type])\n  @@index([type, createdAt(sort: Desc)])\n  @@index([email, type])\n}\n\nmodel ResendLogs {\n  id        String   @id @default(uuid())\n  email     String\n  subject   String\n  status    String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([email, createdAt(sort: Desc)])\n  @@index([createdAt(sort: Desc)])\n  @@index([status])\n  @@index([email, status])\n}\n\nmodel SubscribeBounty {\n  id         String    @id @default(uuid())\n  userId     String\n  bountyId   String\n  isArchived Boolean   @default(false)\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime  @updatedAt\n  User       User      @relation(fields: [userId], references: [id])\n  Bounties   Bounties? @relation(fields: [bountyId], references: [id])\n\n  @@unique([userId, bountyId])\n  @@index([bountyId])\n  @@index([userId])\n  @@index([userId, bountyId])\n  @@index([bountyId, isArchived])\n  @@index([userId, isArchived])\n}\n\nmodel SubscribeHackathon {\n  id          String     @id @default(uuid())\n  userId      String\n  hackathonId String\n  isArchived  Boolean    @default(false)\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n  User        User       @relation(fields: [userId], references: [id])\n  Hackthons   Hackathon? @relation(fields: [hackathonId], references: [id])\n\n  @@index([hackathonId])\n  @@index([userId])\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Hackathon {\n  id                 String               @id @default(uuid())\n  slug               String               @unique\n  name               String\n  logo               String\n  sponsorId          String?              @unique\n  deadline           DateTime?\n  startDate          DateTime?\n  description        String\n  altLogo            String?\n  announceDate       DateTime?\n  eligibility        Json?\n  listings           Bounties[]\n  Sponsor            Sponsors?            @relation(fields: [sponsorId], references: [id])\n  User               User[]\n  SubscribeHackathon SubscribeHackathon[]\n}\n\nmodel UnsubscribedEmail {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  createdAt DateTime @default(now())\n}\n\nmodel BlockedEmail {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  createdAt DateTime @default(now())\n}\n\nmodel CreditLedger {\n  id             String            @id @default(uuid())\n  userId         String\n  submissionId   String?\n  applicationId  String?\n  type           CreditEventType\n  change         Int\n  effectiveMonth DateTime\n  createdAt      DateTime          @default(now())\n  user           User              @relation(fields: [userId], references: [id])\n  submission     Submission?       @relation(fields: [submissionId], references: [id])\n  application    GrantApplication? @relation(fields: [applicationId], references: [id])\n\n  @@index([userId])\n  @@index([submissionId])\n  @@index([applicationId])\n  @@index([effectiveMonth])\n}\n\nenum CreditEventType {\n  SUBMISSION\n  SPAM_PENALTY\n  WIN_BONUS\n  MONTHLY_CREDIT\n  CREDIT_REFUND\n  GRANT_WIN_BONUS\n  GRANT_SPAM_PENALTY\n}\n\nenum TalentRankingSkills {\n  DEVELOPMENT\n  DESIGN\n  CONTENT\n  OTHER\n  ALL\n}\n\nenum EmailType {\n  BOUNTY_REVIEW\n  BOUNTY_DEADLINE\n  BOUNTY_DEADLINE_WEEK\n  BOUNTY_CLOSE_DEADLINE\n  NO_VERIFICATION\n  NO_ACTIVITY\n  NO_REVIEW_SPONSOR_1\n  NO_REVIEW_SPONSOR_2\n  ROLLING_15_DAYS\n  ROLLING_30_DAYS\n  NEW_LISTING\n  ROLLING_UNPUBLISH\n  UNFILLED_PROFILE\n  WALLET_ANNOUNCEMENT\n  CREDITS_ANNOUNCEMENT\n  AUTO_GENERATE_ANNOUNCEMENT\n}\n\nenum Role {\n  ADMIN\n  MEMBER\n}\n\nenum Source {\n  NATIVE\n  IMPORT\n}\n\nenum ApplicationType {\n  rolling\n  fixed\n}\n\nenum status {\n  OPEN\n  REVIEW\n  CLOSED\n  VERIFYING\n  VERIFY_FAIL\n}\n\nenum GrantStatus {\n  OPEN\n  CLOSED\n}\n\nenum GrantApplicationStatus {\n  Pending\n  Approved\n  Completed\n  Rejected\n}\n\nenum BountyType {\n  bounty\n  project\n  hackathon\n}\n\nenum CommentRefType {\n  BOUNTY\n  SUBMISSION\n  GRANT_APPLICATION\n  POW\n}\n\nenum CommentType {\n  NORMAL\n  SUBMISSION\n  DEADLINE_EXTENSION\n  WINNER_ANNOUNCEMENT\n}\n\nenum JobType {\n  parttime\n  fulltime\n  internship\n}\n\nenum CompensationType {\n  fixed\n  range\n  variable\n}\n\nenum SubmissionLabels {\n  Unreviewed\n  Reviewed\n  Shortlisted\n  Spam\n  Low_Quality\n  Mid_Quality\n  High_Quality\n  Pending\n}\n\nenum TalentRankingTimeframe {\n  THIS_YEAR\n  LAST_30_DAYS\n  LAST_7_DAYS\n  ALL_TIME\n}\n\nenum SubmissionStatus {\n  Pending\n  Approved\n  Rejected\n}\n\nenum GrantTrancheStatus {\n  Pending\n  Approved\n  Rejected\n  Paid\n}\n",
  "inlineSchemaHash": "820df5b25d86c841b635d3f96b229f66beb46670675193dfeab488796ed84e5e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Bounties\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"commitmentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"eligibility\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"status\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rewardAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rewards\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"maxBonusSpots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usdValue\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"enum\",\"type\":\"Source\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"applicationLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"BountyType\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isWinnersAnnounced\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"templateId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocSocials\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hackathonprize\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"applicationType\",\"kind\":\"enum\",\"type\":\"ApplicationType\"},{\"name\":\"timeToComplete\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"references\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"referredBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isPrivate\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hackathonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"compensationType\",\"kind\":\"enum\",\"type\":\"CompensationType\"},{\"name\":\"maxRewardAsk\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"minRewardAsk\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"template\",\"kind\":\"object\",\"type\":\"BountiesTemplates\",\"relationName\":\"BountiesToBountiesTemplates\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"BountiesToSponsors\"},{\"name\":\"poc\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"poc\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shouldSendEmail\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFndnPaying\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"Submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"BountiesToSubmission\"},{\"name\":\"SubscribeBounty\",\"kind\":\"object\",\"type\":\"SubscribeBounty\",\"relationName\":\"BountiesToSubscribeBounty\"},{\"name\":\"Hackathon\",\"kind\":\"object\",\"type\":\"Hackathon\",\"relationName\":\"BountiesToHackathon\"},{\"name\":\"winnersAnnouncedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Scouts\",\"kind\":\"object\",\"type\":\"Scouts\",\"relationName\":\"BountiesToScouts\"},{\"name\":\"Comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"BountiesToComment\"},{\"name\":\"discordMessageIds\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"BountiesTemplates\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emoji\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"BountyType\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"applicationType\",\"kind\":\"enum\",\"type\":\"ApplicationType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"status\"},{\"name\":\"timeToComplete\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"references\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"referredBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"compensationType\",\"kind\":\"enum\",\"type\":\"CompensationType\"},{\"name\":\"maxRewardAsk\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"minRewardAsk\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rewardAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rewards\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"maxBonusSpots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usdValue\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocSocials\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"enum\",\"type\":\"Source\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"Bounties\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToBountiesTemplates\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"BountiesTemplatesToSponsors\"},{\"name\":\"poc\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"poc\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refType\",\"kind\":\"enum\",\"type\":\"CommentRefType\"},{\"name\":\"refId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPinned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"replyToId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"CommentType\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"repliedTo\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"},{\"name\":\"listing\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToComment\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"CommentToSubmission\"},{\"name\":\"pow\",\"kind\":\"object\",\"type\":\"PoW\",\"relationName\":\"CommentToPoW\"},{\"name\":\"GrantApplication\",\"kind\":\"object\",\"type\":\"GrantApplication\",\"relationName\":\"CommentToGrantApplication\"}],\"dbName\":null},\"Grants\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"minReward\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"maxReward\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalPaid\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalApproved\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"historicalApplications\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"historicalPaid\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"GrantsToSponsors\"},{\"name\":\"poc\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GrantsToUser\"},{\"name\":\"questions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"pocSocials\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"GrantStatus\"},{\"name\":\"GrantApplication\",\"kind\":\"object\",\"type\":\"GrantApplication\",\"relationName\":\"GrantApplicationToGrants\"},{\"name\":\"airtableId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avgResponseTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isNative\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPrivate\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"references\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ai\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"GrantTranche\",\"kind\":\"object\",\"type\":\"GrantTranche\",\"relationName\":\"GrantTrancheToGrants\"},{\"name\":\"approverRecordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailSender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"replyToEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailSalutation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"communityLink\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"GrantApplication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"applicationStatus\",\"kind\":\"enum\",\"type\":\"GrantApplicationStatus\"},{\"name\":\"projectTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectOneLiner\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectDetails\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectTimeline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"proofOfWork\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twitter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"github\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestones\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kpi\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GrantApplicationToUser\"},{\"name\":\"grant\",\"kind\":\"object\",\"type\":\"Grants\",\"relationName\":\"GrantApplicationToGrants\"},{\"name\":\"label\",\"kind\":\"enum\",\"type\":\"SubmissionLabels\"},{\"name\":\"ask\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"approvedAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"approvedAmountInUSD\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"decidedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalPaid\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isShipped\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"paymentDetails\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"totalTranches\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"like\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToGrantApplication\"},{\"name\":\"decidedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ai\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"GrantTranche\",\"kind\":\"object\",\"type\":\"GrantTranche\",\"relationName\":\"GrantApplicationToGrantTranche\"},{\"name\":\"CreditLedger\",\"kind\":\"object\",\"type\":\"CreditLedger\",\"relationName\":\"CreditLedgerToGrantApplication\"}],\"dbName\":null},\"GrantTranche\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"applicationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ask\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"update\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"helpWanted\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"GrantTrancheStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"GrantApplication\",\"kind\":\"object\",\"type\":\"GrantApplication\",\"relationName\":\"GrantApplicationToGrantTranche\"},{\"name\":\"Grant\",\"kind\":\"object\",\"type\":\"Grants\",\"relationName\":\"GrantTrancheToGrants\"},{\"name\":\"approvedAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"decidedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trancheNumber\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tweet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubmissionStatus\"},{\"name\":\"eligibilityAnswers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isWinner\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"winnerPosition\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"like\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isPaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"paymentDetails\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"otherInfo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ask\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"label\",\"kind\":\"enum\",\"type\":\"SubmissionLabels\"},{\"name\":\"rewardInUSD\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"listing\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToSubmission\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"ogImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToSubmission\"},{\"name\":\"CreditLedger\",\"kind\":\"object\",\"type\":\"CreditLedger\",\"relationName\":\"CreditLedgerToSubmission\"}],\"dbName\":null},\"Sponsors\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twitter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"entityName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isCaution\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"st\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"verificationInfo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"Hackathon\",\"kind\":\"object\",\"type\":\"Hackathon\",\"relationName\":\"HackathonToSponsors\"},{\"name\":\"UserSponsors\",\"kind\":\"object\",\"type\":\"UserSponsors\",\"relationName\":\"SponsorsToUserSponsors\"},{\"name\":\"Bounties\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToSponsors\"},{\"name\":\"Templates\",\"kind\":\"object\",\"type\":\"BountiesTemplates\",\"relationName\":\"BountiesTemplatesToSponsors\"},{\"name\":\"Grants\",\"kind\":\"object\",\"type\":\"Grants\",\"relationName\":\"GrantsToSponsors\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SponsorsToUser\"},{\"name\":\"UserInvites\",\"kind\":\"object\",\"type\":\"UserInvites\",\"relationName\":\"SponsorsToUserInvites\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isTalentFilled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"interests\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twitter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discord\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"github\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"linkedin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"telegram\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"community\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"superteamLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cryptoExperience\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workPrefernce\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentEmployer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notifications\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"private\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"currentSponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"hackathonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"featureModalShown\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"surveysShown\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"stRecommended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"acceptedTOS\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"stLead\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentSponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"SponsorsToUser\"},{\"name\":\"UserSponsors\",\"kind\":\"object\",\"type\":\"UserSponsors\",\"relationName\":\"UserToUserSponsors\"},{\"name\":\"poc\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"poc\"},{\"name\":\"templates\",\"kind\":\"object\",\"type\":\"BountiesTemplates\",\"relationName\":\"poc\"},{\"name\":\"Comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"Submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"Grants\",\"kind\":\"object\",\"type\":\"Grants\",\"relationName\":\"GrantsToUser\"},{\"name\":\"UserInvites\",\"kind\":\"object\",\"type\":\"UserInvites\",\"relationName\":\"UserToUserInvites\"},{\"name\":\"SubscribeBounty\",\"kind\":\"object\",\"type\":\"SubscribeBounty\",\"relationName\":\"SubscribeBountyToUser\"},{\"name\":\"PoW\",\"kind\":\"object\",\"type\":\"PoW\",\"relationName\":\"PoWToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"Hackathon\",\"kind\":\"object\",\"type\":\"Hackathon\",\"relationName\":\"HackathonToUser\"},{\"name\":\"emailSettings\",\"kind\":\"object\",\"type\":\"EmailSettings\",\"relationName\":\"EmailSettingsToUser\"},{\"name\":\"TalentRankings\",\"kind\":\"object\",\"type\":\"TalentRankings\",\"relationName\":\"TalentRankingsToUser\"},{\"name\":\"Scouts\",\"kind\":\"object\",\"type\":\"Scouts\",\"relationName\":\"ScoutsToUser\"},{\"name\":\"GrantApplication\",\"kind\":\"object\",\"type\":\"GrantApplication\",\"relationName\":\"GrantApplicationToUser\"},{\"name\":\"SubscribeHackathon\",\"kind\":\"object\",\"type\":\"SubscribeHackathon\",\"relationName\":\"SubscribeHackathonToUser\"},{\"name\":\"isBlocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"privyDid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isKYCVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"kycName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycCountry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycDOB\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycIDNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycIDType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"CreditLedger\",\"kind\":\"object\",\"type\":\"CreditLedger\",\"relationName\":\"CreditLedgerToUser\"}],\"dbName\":null},\"Scouts\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dollarsEarned\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"invited\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"listing\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToScouts\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ScoutsToUser\"}],\"dbName\":null},\"TalentRankings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skill\",\"kind\":\"enum\",\"type\":\"TalentRankingSkills\"},{\"name\":\"timeframe\",\"kind\":\"enum\",\"type\":\"TalentRankingTimeframe\"},{\"name\":\"rank\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"submissions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"winRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalEarnedInUSD\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TalentRankingsToUser\"}],\"dbName\":null},\"PoW\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subSkills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"like\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"likeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PoWToUser\"},{\"name\":\"ogImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToPoW\"}],\"dbName\":null},\"EmailSettings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EmailSettingsToUser\"}],\"dbName\":null},\"UserSponsors\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSponsors\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"SponsorsToUserSponsors\"}],\"dbName\":null},\"UserInvites\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"memberType\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserInvites\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"SponsorsToUserInvites\"}],\"dbName\":null},\"emailLogs\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"EmailType\"},{\"name\":\"bountyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ResendLogs\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SubscribeBounty\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bountyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubscribeBountyToUser\"},{\"name\":\"Bounties\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToSubscribeBounty\"}],\"dbName\":null},\"SubscribeHackathon\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hackathonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubscribeHackathonToUser\"},{\"name\":\"Hackthons\",\"kind\":\"object\",\"type\":\"Hackathon\",\"relationName\":\"HackathonToSubscribeHackathon\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Hackathon\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sponsorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"altLogo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"announceDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"eligibility\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Bounties\",\"relationName\":\"BountiesToHackathon\"},{\"name\":\"Sponsor\",\"kind\":\"object\",\"type\":\"Sponsors\",\"relationName\":\"HackathonToSponsors\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"HackathonToUser\"},{\"name\":\"SubscribeHackathon\",\"kind\":\"object\",\"type\":\"SubscribeHackathon\",\"relationName\":\"HackathonToSubscribeHackathon\"}],\"dbName\":null},\"UnsubscribedEmail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"BlockedEmail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CreditLedger\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"applicationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"CreditEventType\"},{\"name\":\"change\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"effectiveMonth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CreditLedgerToUser\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"CreditLedgerToSubmission\"},{\"name\":\"application\",\"kind\":\"object\",\"type\":\"GrantApplication\",\"relationName\":\"CreditLedgerToGrantApplication\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = {
  getRuntime: async () => require('./query_compiler_bg.js'),
  getQueryCompilerWasmModule: async () => {
    const loader = (await import('#wasm-compiler-loader')).default
    const compiler = (await loader).default
    return compiler
  }
}

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

